<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[彻底征服闭包定义、特点、价值、用法]]></title>
      <url>/2017/04/10/2017-04-10-%E5%BD%BB%E5%BA%95%E5%BE%81%E6%9C%8D%E9%97%AD%E5%8C%85/</url>
      <content type="html"><![CDATA[<h3 id="闭包的定义与含义"><a href="#闭包的定义与含义" class="headerlink" title="闭包的定义与含义"></a>闭包的定义与含义</h3><p> <strong>闭：是指闭包的内部环境对外部不可见。</strong></p>
<p>   闭包具有<strong>控制外部域的能力，也就是可以访问外部环境的执行域，</strong>，同时又能<strong>防止外部域对闭包的反向控制，</strong>也就是说，<strong>闭包的领域是对外封闭的。</strong><br><a id="more"></a></p>
<h3 id="闭包的实现方法"><a href="#闭包的实现方法" class="headerlink" title="闭包的实现方法"></a><strong>闭包的实现方法</strong></h3><p> <strong>JS闭包是通过function实现的</strong></p>
<h3 id="闭包的特权"><a href="#闭包的特权" class="headerlink" title="闭包的特权"></a><strong>闭包的特权</strong></h3><p> <strong>闭包内声明的变量，闭包外的任何环境都无法访问。</strong><br>举个栗子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">     <span class="keyword">var</span> a=<span class="number">10</span>;</div><div class="line">     <span class="keyword">var</span> b=<span class="number">20</span>;</div><div class="line">     <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;      </div><div class="line">          <span class="built_in">console</span>.log(a);         </div><div class="line">     &#125;;</div><div class="line">     <span class="keyword">return</span> f2;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> result =f1();</div><div class="line">result();</div></pre></td></tr></table></figure></p>
<p>这里的闭包是f1函数，不懂没关系，下面我会运用这个例子上面写的知识来去解释为什么f1是闭包。</p>
<p>在上面的代码中，函数f2就被包括在函数f1内部，这时f1内部的所有局部变量，对f2都是可见的，但是反过来就不行，f2内部的局部变量对f1就是不可见的。<br>既然<strong>f2可以读取f1中的局部变量，那么只要把f2作为返回值，我们就可以在f1外部读取它的内部变量！</strong><br><strong>这种函数叫称之为闭包函数。</strong><br>所以，这个困扰初学者到底哪个是闭包的问题也就解决了，顺着这个思路你就会发现变量a和变量b也是闭包的一部分，因为他们对外不可见。<br>所以这个代码例子的闭包部分是<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a=<span class="number">10</span>; </div><div class="line"><span class="keyword">var</span> b=<span class="number">20</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span><span class="params">()</span></span>&#123;&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="JS垃圾回收机制"><a href="#JS垃圾回收机制" class="headerlink" title="JS垃圾回收机制"></a><strong>JS垃圾回收机制</strong></h3><p>这里为了让小伙伴们更好的理解闭包，我顺带把JS垃圾回收机制说一下，尽量用通俗简单的话语解释。<br>一句话定义：<br>JS垃圾回收机制规定：<strong>当你调用完一个函数后，他就不存在了</strong></p>
<p>举个栗子：<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">aaa</span><span class="params">()</span>  <span class="comment">&#123;</span></span></div><div class="line">                var a =1;</div><div class="line">                &#125;</div><div class="line"><span class="title">aaa</span><span class="params">()</span>;</div></pre></td></tr></table></figure></p>
<p>上面这段代码当函数aaa调用完【aaa();这句就是指函数调用】，那么变量a也就不存在了，它所占的内存就被JS垃圾回收机制给回收了。</p>
<p>那么怎样才能不能JS垃圾回收机制回收呢？也就是让变量a在内存中呆的时间久一点，别一执行完函数就消失了。</p>
<p>解决这个问题就是要运用闭包的特性。</p>
<h3 id="闭包的特点"><a href="#闭包的特点" class="headerlink" title="闭包的特点"></a><strong>闭包的特点</strong></h3><h4 id="函数嵌套函数"><a href="#函数嵌套函数" class="headerlink" title="函数嵌套函数"></a>函数嵌套函数</h4><p>内部函数可以引用外部函数的参数和变量,这样就会使参数和变量不会被垃圾回收机制所收回</p>
<p>举个栗子：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f3</span><span class="params">(a)</span></span>&#123;</div><div class="line">	            <span class="keyword">var</span> b=<span class="number">1</span>;</div><div class="line">				<span class="function"><span class="keyword">function</span> <span class="title">f4</span><span class="params">()</span></span>&#123;</div><div class="line">				    alert(a);</div><div class="line">					alert(b);</div><div class="line">			                 &#125;</div><div class="line">			  &#125;</div></pre></td></tr></table></figure></p>
<p>上面栗子可以看出，函数f4内部引用了外部函数f3的参数a和局部变量b<br>这样函数执行完以后，参数和变量都不会被垃圾回收机制回收。</p>
<p>下面再看一个栗子【首先说明，下面这个栗子很明显不是闭包】<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">aaa</span><span class="params">()</span><span class="comment">&#123;</span></span></div><div class="line">					var a =1;</div><div class="line">					a++;</div><div class="line">					console.log(a);</div><div class="line">			  &#125;</div><div class="line"><span class="title">aaa</span><span class="params">()</span>;</div><div class="line">aaa();</div></pre></td></tr></table></figure></p>
<p>上面代码的执行结果如图：</p>
<p><img src="/images/1.png" alt=""></p>
<p>调用两次的结果都是2，变量a并没进行累加，说明在调用第一次函数aaa后，变量a【值为2】已经销毁了，第二次调用后，变量a又会重新从1加到2进行输出。<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> b =<span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bbb</span><span class="params">()</span><span class="comment">&#123;</span></span></div><div class="line">				b++;</div><div class="line">				console.log(a);</div><div class="line">			  &#125;</div><div class="line"><span class="title">bbb</span><span class="params">()</span>;</div><div class="line">bbb();</div></pre></td></tr></table></figure></p>
<p>调用两次的结果:第一次是2，第二次是3，为什么呢，因为变量b是全局变量，是定义在全局作用域下的【简单点解释就是全局变量，做大的一个作用域】当函数bbb执行完后，虽然函数bbb里的东西销毁了，但是在全局作用域中，变量b还存在，就导致了变量b没有被销毁，继续存在，于是就会一直累加。从这里再次对比上一个栗子，变量a是局部变量，也没有在外部域存在，所以执行完函数aaa后，就会被销毁。</p>
<p>那么如何才能既让a是局部变量，又能让a累加呢？</p>
<p>这就是闭包最拿手的事情!!</p>
<p>栗子如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">aaa</span>(<span class="params"></span>) </span>&#123;</div><div class="line">					<span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line">					<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">						a++;</div><div class="line">						<span class="built_in">console</span>.log(a);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">var</span> c = aaa();</div><div class="line">				c();</div><div class="line">				c();</div><div class="line">				alert(a);</div></pre></td></tr></table></figure>
<p>执行完以后显示如图：<br><img src="/images/2.png" alt=""><br>第一次调用结果为2，第二次调用结果为3，成功实现了既让a是局部变量，又能让a累加的功能。同时你看到了上面，变量a未定义，对，你没有看错，我在全局作用域中了加了一句alert(a)，结果表明外部域是无法访问到内部域的变量a的。现在是不是有点慢慢通窍了，有种茅塞顿开的感觉了吧。</p>
<p>最后用一句话定义闭包：<br><strong>函数内在包含子函数，并最终return子函数。</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">     <span class="keyword">var</span> a=<span class="number">10</span>;</div><div class="line">     <span class="keyword">var</span> b=<span class="number">20</span>;</div><div class="line">     <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">          <span class="built_in">console</span>.log(a);</div><div class="line">     &#125;;</div><div class="line">     <span class="keyword">return</span> f2;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> result =f1();</div><div class="line">result();</div></pre></td></tr></table></figure>
<p><strong>闭包函数的最大价值在于：我们可以在函数(f2)的外部（即子函数也就是f2函数），直接读取该函数的局部变量。</strong></p>
<p>再深入研究，就会发现f1()函数就如同一个“类”，而其定义的局部变量就如同该“类”的全局变量；而子函数f2()函数，则如同这个“类”的方法，可以直接使用这个“类”的全局变量n</p>
<h3 id="闭包到底有什么用？"><a href="#闭包到底有什么用？" class="headerlink" title="闭包到底有什么用？"></a><strong>闭包到底有什么用？</strong></h3><p>1、<strong>缓存</strong>：显而易见，就是可以实现数据缓存，我们可以把一个需要长期用到的变量设为闭包函数的局部变量，在子函数里面直接使用它。因此局部变量只定义初始化一次，但我们可以多次调用子函数并使用该变量。<strong>这比起我们在子函数中定义初始化变量，多次调用则多次初始化的做法，效率更高。</strong>闭包函数常见的一种用途就是，我们可以通过此实现<strong>计数功能</strong>。在闭包函数定义一个计数变量，而在子函数中对其进行++的操作。这样每次调用闭包函数，计数变量就会加1。</p>
<p>2、<strong>实现封装</strong>：如前面所说，闭包函数就如同一个“类”，只有在该闭包函数里的方法才可以使用其局部变量，闭包函数之外的方法是不能读取其局部变量的。这就实现了面向对象的封装性，更安全更可靠。</p>
<p>闭包的知识我先说到这里，虽然有一些很重要的细节我没有说，比如，怎么改进这个闭包的书写形式来达到更好的模块化，其实是关于函数的知识，我不想在闭包上把很多细节都扯了，这篇文章对于你理解闭包已经没有问题了，毕竟在这个碎片化时间的世界里，一篇文章不能太长，这里其他的知识我先不说了，过几天我写一篇征服JS函数的文章，再结合这个把闭包彻底搞透。</p>
]]></content>
      
        <categories>
            
            <category> 博客 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[运营人的矛与盾]]></title>
      <url>/2017/03/10/%E8%BF%90%E8%90%A5/</url>
      <content type="html"><![CDATA[<h3 id="为什么运营人即是矛又是盾"><a href="#为什么运营人即是矛又是盾" class="headerlink" title="为什么运营人即是矛又是盾"></a>为什么运营人即是矛又是盾</h3><p>往本质上看，运营人的存在是为了去最大化实现公司的业务价值，去为公司盈利，去让公司的产品更好的被更多的人知道和使用。</p>
<p>那么对于运营人自身的矛盾也就很好理解了。</p>
<p>比如举个很好的例子：<br><a id="more"></a></p>
<p>公司的考研培训部门让你去给该部门做运营，作为运营人，会去向广大大学生宣传当今每年毕业人数几百万，就业压力很大，如果去考研，既能提高自己的知识与学历，又能更容易的找到自己满意的工作。</p>
<p>然后获得非常好的效果后，你被该公司安排到就业培训部门救火，这时候作为运营人，你就要展示矛与盾的能力了，这时候，你就要开始向大学生宣传读个研还是要找工作，出来比起人家的三年工作经验，没有多大优势。这个例子就很好的体现出了运营人的矛盾，或者有种说法叫运营人的阴谋论，当然这不是贬低运营人，知识客观分析，这也展现了一个好的运营人所需要具有的能力。</p>
<h3 id="如何写一个好的文案："><a href="#如何写一个好的文案：" class="headerlink" title="如何写一个好的文案："></a>如何写一个好的文案：</h3><p>一个重要技巧：写失去的东西能够获得更高的关注度，这也是一个好的标题要多借鉴的方面</p>
<p>写作思路：一个好的标题，要多去想目标用户为什么要看这篇文章，看这篇文章的目的是什么，看这篇文章的用户的痛点是什么？</p>
<p>把这个目的和痛点结合写成标题，这样基本就是一个好的标题的文案。</p>
]]></content>
      
        <categories>
            
            <category> 运营 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 运营 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何写好一个竞品分析]]></title>
      <url>/2016/10/10/%E5%A6%82%E4%BD%95%E5%86%99%E5%A5%BD%E4%B8%80%E4%B8%AA%E7%AB%9E%E5%93%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h3 id="产品概况"><a href="#产品概况" class="headerlink" title="产品概况"></a>产品概况</h3><h4 id="产品简介"><a href="#产品简介" class="headerlink" title="产品简介"></a>产品简介</h4><p>用一个表格就可以搞定</p>
<table>
<thead>
<tr>
<th>产品名称</th>
<th style="text-align:right">上线时间（web）</th>
<th style="text-align:center">当前版本</th>
<th>迭代版本</th>
<th>体验环境</th>
<th>slogan（标语）</th>
</tr>
</thead>
<tbody>
<tr>
<td>竞品A</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>竞品B</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>竞品C</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="下载量"><a href="#下载量" class="headerlink" title="下载量"></a>下载量</h4><p>同样一个表格<br><a id="more"></a></p>
<table>
<thead>
<tr>
<th>产品名称</th>
<th style="text-align:right">Android下载量</th>
<th style="text-align:center">IOS下载量</th>
<th>Android近7日日均下载</th>
<th>IOS近7日日均下载量 </th>
</tr>
</thead>
<tbody>
<tr>
<td>竞品A</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td></td>
<td></td>
</tr>
<tr>
<td>竞品B</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td></td>
<td></td>
</tr>
<tr>
<td>竞品C</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="需求图谱"><a href="#需求图谱" class="headerlink" title="需求图谱"></a>需求图谱</h4><h4 id="搜索指数概况和趋势"><a href="#搜索指数概况和趋势" class="headerlink" title="搜索指数概况和趋势"></a>搜索指数概况和趋势</h4><p>用表格把指数概况表示出来，再用一个表格把指数趋势表示出来。</p>
<hr>
<h3 id="市场分析"><a href="#市场分析" class="headerlink" title="市场分析"></a>市场分析</h3><h4 id="市场规模"><a href="#市场规模" class="headerlink" title="市场规模"></a>市场规模</h4><p>用表格，比如直方图配合折线图来显示特定时间段的用户规模以及增长率。</p>
<p>再将所得的规模数据与当前具有标准的规模进行比较，比如中国网名数量，移动端网名数量，来进行百分比对比。</p>
<h4 id="市场前景"><a href="#市场前景" class="headerlink" title="市场前景"></a>市场前景</h4><h3 id="用户分析"><a href="#用户分析" class="headerlink" title="用户分析"></a>用户分析</h3><h4 id="用户画像"><a href="#用户画像" class="headerlink" title="用户画像"></a>用户画像</h4><ol>
<li>年龄和性别信息</li>
<li>地域分布</li>
</ol>
<h4 id="核心用户和主流用户"><a href="#核心用户和主流用户" class="headerlink" title="核心用户和主流用户"></a>核心用户和主流用户</h4><p>核心用户：指对产品的发展做出贡献的忠实用户。   用户占比比较小，却很重要。</p>
<p>主流用户：是指消费产品内容和功能的用户。       用户占比非常大。</p>
<p>对每个竞品进行核心用户和主流用户分析。</p>
<hr>
<h3 id="功能分析"><a href="#功能分析" class="headerlink" title="功能分析"></a>功能分析</h3><h4 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h4><h4 id="核心功能对比"><a href="#核心功能对比" class="headerlink" title="核心功能对比"></a>核心功能对比</h4><h4 id="部分功能测试"><a href="#部分功能测试" class="headerlink" title="部分功能测试"></a>部分功能测试</h4><h4 id="关键功能流程"><a href="#关键功能流程" class="headerlink" title="关键功能流程"></a>关键功能流程</h4><p>把每个竞品的功能页面图截取出来放在一起–&gt;<strong>再用</strong>一个流程图去集中表示过程–&gt;<strong>然后</strong>对每个竞品的关键功能流程进行分析，一次列项表示出来–&gt;<strong>最后</strong>进行流程总述</p>
<p>提示：一般必须关注登录注册流程。</p>
<h4 id="创新功能"><a href="#创新功能" class="headerlink" title="创新功能"></a>创新功能</h4><p>列出每个竞品的创新功能，并加以分析评价。</p>
<h3 id="交互视觉设计"><a href="#交互视觉设计" class="headerlink" title="交互视觉设计"></a>交互视觉设计</h3><h4 id="交互设计"><a href="#交互设计" class="headerlink" title="交互设计"></a>交互设计</h4><p>分析每个竞品在交互设计上都有什么突出表现。具体突出表现是什么，依次对竞品进行分析。</p>
<h4 id="视觉设计"><a href="#视觉设计" class="headerlink" title="视觉设计"></a>视觉设计</h4><p>对每个竞品进行分析。<br>例如先对竞品A分析，在一个框架内，列出竞品A的主要页面设计截图。<br>最后对每个竞品的<strong>整体风格、排版设计、icon设计、竞品主图、字体字号</strong>进行总结。</p>
<hr>
<h3 id="运营分析"><a href="#运营分析" class="headerlink" title="运营分析"></a>运营分析</h3><h4 id="内容运营"><a href="#内容运营" class="headerlink" title="内容运营"></a>内容运营</h4><p>何为内容运营？<br>大致为如下解释：<br><strong>采集与创造</strong>——（内容的生产者来完成，可能是用户，也可能是产品本身）<br><strong>呈现与管理</strong>——（主要是产品本身来完成）<br><strong>扩散与传导</strong>——（由用户和产品本身共同完成，比如分享）<br><strong>效果与评估</strong>——（由用户和产品本身共同完成，比如用户点赞评论反馈，产品本身对内容的审核等）<br>对每个竞品进行内容运营分析<br>比如对竞品A进行分析：<br>在一个框架内列出三个区域，依次为：<br>内容生产者<br>产品本身<br>内容消费者</p>
<h4 id="用户运营"><a href="#用户运营" class="headerlink" title="用户运营"></a>用户运营</h4><p>何为用户运营？<br>“用户运营”对于一个产品来说尤为重要，它的主要内容包括：<br>拉新用户<br>维护老用户活跃度<br>建立用户流失预警机制<br>对已流失的用户进行挽回<br>促进用户付费</p>
<h4 id="活动运营"><a href="#活动运营" class="headerlink" title="活动运营"></a>活动运营</h4><h4 id="渠道运营"><a href="#渠道运营" class="headerlink" title="渠道运营"></a>渠道运营</h4><hr>
<h3 id="产品评价"><a href="#产品评价" class="headerlink" title="产品评价"></a>产品评价</h3><h4 id="应用商店评价"><a href="#应用商店评价" class="headerlink" title="应用商店评价"></a>应用商店评价</h4><p>比如安卓平均评分、IOS平均评分，安卓总评论人数，IOS总评论人数，然后对其进行分析总结</p>
<p>去应用商店评论去收集好评，和差评的具体内容，去挖掘产品问题然后去改进。</p>
<h4 id="百度、微博、知乎评价"><a href="#百度、微博、知乎评价" class="headerlink" title="百度、微博、知乎评价"></a>百度、微博、知乎评价</h4><p>分别进行评价汇总</p>
<p>最后关于竞品分析的几点个人思考</p>
<p>1：通过对网上各路大牛竞品分析的相关文章，案例的研究，总结了自己的一套竞品分析流程。<br>2：分析尽可能通俗易懂，不搞什么专业术语，好像逼格很高的样子，其实空洞乏味。<br>3：这个竞品分析模版主要是研究产品本身，大篇幅分析功能设计，然后按照产品运营的思路进行了运营分析。<br>4：真正项目的竞品分析，是有目的，有针对性的，不同的阶段竞品分析的意义也不同，所以不要盲目跟随别人的竞品分析模板。<br>5：这套竞品分析中的数据来源于“百度指数”和“ASO100”，为什么没有选大家习惯用的“易观千帆”，“艾瑞数据”，”TalkingData”或者是“baiduMOTA”这些看起来可能专业的数据分析平台，对比了一下这些平台上的数据，大方向差不多，但是数据相差甚远，比如产品用户的性别属性，差30%的都有。反正吧，最终衡量选择了“百度指数”，虽然不能准确反映APP的具体数据，但是或许可以反映APP的真是情况。<br>6：“竞品分析”是主观和客观的结合，所以你认为的可以是你认为的，你认为的不一定是你认为的，辩证看待。<br>7：竞品分析要注重分析方法。</p>
]]></content>
      
        <categories>
            
            <category> 产品经理 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 竞品分析 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[必须知道的产品经理专业术语]]></title>
      <url>/2016/10/03/%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E4%B8%93%E4%B8%9A%E6%9C%AF%E8%AF%AD/</url>
      <content type="html"><![CDATA[<p>MRD：Market Requirements Document (市场需求文档)</p>
<p>PRD：Product Requirements Document (产品需求文档)</p>
<p><strong>注意：MRD和PRD互为因果，有了输入MRD才能有输出PRD</strong></p>
<p>KPI：Key Performance Indicator(关键绩效指标)</p>
<p>PV：page view(页面浏览量)</p>
<p>UV：unique visitor(独立IP)<br><a id="more"></a></p>
<p>FSD：Functional Specifications Document (功能详细说明文档)</p>
<p>C2C：Consumer to Consumer(顾客对顾客)</p>
<p>B2B：Business to Business(商家对商家)</p>
<p>O2O：Online to Offline(线上线下电子商务)</p>
<p>P2P：person to person</p>
<p>B2C：Business to Consumer(商家对个人)</p>
<p>UCD：User Centered Design(以用户为中心的设计)</p>
<p>SNS：Social Networking Services(社会性网络服务)</p>
<p>IM：Instant Messaging(即时通信)</p>
<p>JD：Job Descriptions(职位描述)</p>
<p>LBS：Location Based Service(基于位置的服务)</p>
<p>RSS：Really Simple Syndication(简易信息聚合)</p>
<hr>
<p>SDK：Software Development Kit(软件开发工具包)</p>
<p>DAU：Daily Active User(日活跃用户量)</p>
<p>OTA：Online Travel Agent(在线旅行社)</p>
<p>UX：User Experience Design(用户体验)</p>
<p>UI：User Interface(用户界面)</p>
<p>UGC：User Generated Content(用户生产内容)</p>
<p>CLI：Command-line Interface(命令行界面)</p>
<p>GUI：Graphical User Interface(图形用户界面)</p>
<p>NUI：Natural User Interface(自然用户界面)</p>
<hr>
<p>GM：General Manager (总经理)</p>
<p>VP：Vice President (副总裁)</p>
<p>AVP：Assistant Vice President (副总裁助理)</p>
<p>HRD：Human Resource Director (人力资源总监)</p>
<p>OD：Operations Director (运营总监)</p>
<p>MD：Marketing Director (市场总监)</p>
<p>OM：Operations Manager (运作经理)</p>
<p>PM：Production Manager(生产经理)、Product Manager(产品经理)、Project Manager(项目经理)</p>
<p>BM：Branch Manager(部门经理)</p>
<p>DM：District Manager(区域经理)</p>
<hr>
<p>URL：Uniform Resoure Locator(统一资源定位器)</p>
<p>UED：User Experience Design(用户体验设计师)</p>
<p>GMV：Gross Merchandise Volume(商品交易总量)</p>
<hr>
<p>SEO：Search Engine Optimization(搜索引擎优化)</p>
<p>SKU：Stock Keeping Unit(库存量单位)</p>
<p>SPU：Standard Product Unit (标准化产品单元)</p>
<p>ROI：Return On Investment(投资回报率)</p>
<p>C2C：Copy to China(借鉴国外成功产品模式)</p>
<p>ERP：Enterprise Resource Planning(企业资源计划)</p>
<p>POA：Primary Optical Area(第一视觉落点区)</p>
<hr>
<p><strong>MVP</strong><br>Minimum Viable Product，最小可行产品，即用最低的成本实现一个尽可能展示核心概念的产品，产品团队可以通过它收集到尽可能多的用户反馈和数据，从而评估这个产品能带来的效益。</p>
<p><strong>进入壁垒</strong></p>
<p>进入壁垒指的是进入某一市场的难度，这一高度取决于自身的技术、成本、对特定资源的占有情况，以及对手的发展程度。如果进入壁垒过高，比如想要做一个超越Google的搜索引擎，这件事在地球上没几个人能做到;如果进入壁垒过低，人人都可以做，那就意味着你的蓝海时段会很短，可能难以获得足够支撑长期发展的用户规模。</p>
<p><strong>商业价值</strong></p>
<p>商业模式指的是一款产品如何创造价值。侠义上来说，就是如何赚钱，广义上来讲，除了经济上的价值，还有社会价值和其他形式的价值。例如不少开源组织，尽管他们自身并不盈利，仅依靠一些基金会维持自身的运作，但其创造了大量的社会价值。虽然这其中并没有钱的味道，但这依然叫做“商业”价值。</p>
<p><strong>PDD</strong></p>
<p>PDD(Product Design Document)产品设计文档，是伴随产品整个生命周期的连接概念与执行的重要工具，它帮助产品团队与研发团队和高层领导达成共识，进而明确研发计划并指导研发过程。</p>
<p>PDD主要包含三类图纸：<br>网站结构图(Website Architecture Map)、网站蓝图(Wireframe或者Mockups)和网页描述表(Page Description Diagram)。</p>
<p>网站结构图通常会以思维导图的形式展现，用于描述整个网站的结构，确定网站的模块划分及网页个数。有的地方也称之为“站点地图”。在绘制网站结构图时，要注意MECE原则(Mutually Exclusive Collectively Exhaustive)，中文含义是“互相独立，完全穷尽”，即要求分类清晰，降低理解门槛，不重复，不缺漏。可以使用MindManager、Omnigraffle、XMind等来做。</p>
<p>网站蓝图，还有一个名字叫“交互设计图”。描述了一个网页中所需要包含的基础元素机器在这个页面中的布局，它会由图形界面设计师最终完善成美观的网页设计图。通常会使用Axure、Visio、Fireworks、Photoshop、Balsamiq Mockups等工具完成。小公司中通常由产品经理单独负责，大公司里会有专门的交互设计师来合作完成。</p>
<p>网页描述表是这三类图中最符合“文档”的概念的。因为它完全可以就是一份word文档。它包含了一个网页中所需展示的元素及其背后的逻辑，并不包含这些元素在页面中的布局(这在网站蓝图中有)。例如：域名、标题、Logo、模块名称及其描述、版权信息等。</p>
<p><strong>注意：</strong><br>PDD的目标用户，首先是产品团队，需要团队内部达成共识;然后是研发团队，用于确认可行性和研发成本;接下来会和研发部门给出的评估意见一起交给高层领导，确认项目周期，拍板资源;项目启动后，PDD回到研发团队指导具体的研发工作，同时进入测试团队，帮助制定测试计划。有时候，外部合作伙伴也会需要查看PDD，以便完成一些合作项目。这其中最重要的目标用户就是研发团队，因为他们是实现所有设计的核心力量，至于领导那边，还是用ppt和keynote去搞定最有效。</p>
<p><strong>提一下墨菲定律</strong></p>
<p>墨菲定律原本的意思是说：<strong>事情如果有变坏的可能，不管这种可能性有多小，它总会发生。</strong>简单的说就是“越怕出事，越会出事”。</p>
<p>放到互联网行业通常就是这样：</p>
<p>凡是输入框，都会遭遇灌水、SPAM、脚本注入。</p>
<p>凡是积分，都会被刷。</p>
<p>凡是推到网站首页的内容，都会出现色情、政治。</p>
<p>凡是用户间沟通的渠道，都会被广告机器人利用。</p>
<p>而对于项目管理而言，又可能是这样：</p>
<p>一项工作如果只有一个人负责，这个人肯定会休假或者离职。</p>
<p>认为没有技术难点的地方，都会成为技术难点或性能瓶颈。</p>
]]></content>
      
        <categories>
            
            <category> 产品经理 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 产品经理 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git知识总结]]></title>
      <url>/2016/08/10/git%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h3 id="遇到的所有问题："><a href="#遇到的所有问题：" class="headerlink" title="遇到的所有问题："></a><strong>遇到的所有问题：</strong></h3><p><strong>1：</strong><br>warning: LF will be replaced by CRLF in XXXXXXXXXXXXXX.<br>解决 git config core.autocrlf false</p>
<p><strong>2：</strong><br>github push 提交代码时停止在writing objects怎么办？<br>git config –global http.postBuffer 524288000</p>
<p><strong>3：</strong><br>新建仓库初始化时，不要点击初始化按钮，<br>否则github就自动建立一个git仓库，并且生成一个版本库<br><a id="more"></a><br>所以这样的话，那你用git push origin master就会说被拒绝<br>这种情况<br><strong>要先git pull origin master</strong><br><strong>再git push origin master</strong></p>
<h3 id="一开始怎么绑定github账号"><a href="#一开始怎么绑定github账号" class="headerlink" title="一开始怎么绑定github账号"></a>一开始怎么绑定github账号</h3><p><strong>设置全局用户名和email，作为每次提交的记录</strong><br>git config –global user.name “name”<br>git config –global user.email “mail.com”  </p>
<h3 id="添加一个仓库"><a href="#添加一个仓库" class="headerlink" title="添加一个仓库"></a><strong>添加一个仓库</strong></h3><p>git remote add origin git@….git<br>git push -u origin master  </p>
<h3 id="当提示权限不够时，添加ssh公钥"><a href="#当提示权限不够时，添加ssh公钥" class="headerlink" title="当提示权限不够时，添加ssh公钥"></a>当提示权限不够时，添加ssh公钥</h3><h3 id="在用户的-ssh目录下找id-rsa-pub等文件，没有的话去生成"><a href="#在用户的-ssh目录下找id-rsa-pub等文件，没有的话去生成" class="headerlink" title="在用户的.ssh目录下找id_rsa.pub等文件，没有的话去生成"></a>在用户的.ssh目录下找id_rsa.pub等文件，没有的话去生成</h3><p>ssh-keygen -t rsa -C “youremail@example.com”  </p>
<h3 id="设置pull的默认地址"><a href="#设置pull的默认地址" class="headerlink" title="设置pull的默认地址"></a>设置pull的默认地址</h3><p>git branch –set-upstream-to=origin/master  </p>
<h3 id="设置push的默认地址"><a href="#设置push的默认地址" class="headerlink" title="设置push的默认地址"></a>设置push的默认地址</h3><p>git remote add origin git@….git  </p>
<h3 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h3><p>git config –global alias.xx ‘’  </p>
<h3 id="临时保存工作区"><a href="#临时保存工作区" class="headerlink" title="临时保存工作区"></a>临时保存工作区</h3><p>git stash<br>git stash pop  </p>
<h3 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h3><p>git reset —hard 版本号  </p>
<h3 id="强行回滚远程服务器"><a href="#强行回滚远程服务器" class="headerlink" title="强行回滚远程服务器"></a>强行回滚远程服务器</h3><p>git push -f  </p>
]]></content>
      
        <categories>
            
            <category> 工具能力 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> GIT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[你的团队需要一个会讲故事的人]]></title>
      <url>/2016/06/10/%E7%94%A8%E6%95%85%E4%BA%8B%E6%80%9D%E7%BB%B4%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p><strong>每看完一本书都有一种技能升级的体会，于是迫不及待的记录下人生中那种获得升华的体会。</strong></p>
<h4 id="何为故事"><a href="#何为故事" class="headerlink" title="何为故事"></a>何为故事</h4><p><strong>互动能够让人找到发自内心的、来源于实践的意义，让讲故事的人和听故事的人都得到满足，这才是故事。</strong>那些下意识就把故事定义为一个有开头、过程和结尾的人一定还没有理解到故事的本质。</p>
<h4 id="重温回忆，留心自己所讲的故事"><a href="#重温回忆，留心自己所讲的故事" class="headerlink" title="重温回忆，留心自己所讲的故事"></a>重温回忆，留心自己所讲的故事</h4><p>可以通过改变你的故事来改变现实感受。<br>  <a id="more"></a></p>
<h4 id="好的故事配方"><a href="#好的故事配方" class="headerlink" title="好的故事配方"></a>好的故事配方</h4><p>一般好故事由三部分组成，旧规矩、中间的波折，新规矩。</p>
<h4 id="一点建议"><a href="#一点建议" class="headerlink" title="一点建议"></a>一点建议</h4><p>试图通过逻辑来控制人们的看法会让对方戒备心增强，会驱使对方离你越来越远。让故事变得更加有人情味。</p>
<h4 id="团队"><a href="#团队" class="headerlink" title="团队"></a>团队</h4><p>团队真正的信任来源于诚实。</p>
<h4 id="慈善和团结"><a href="#慈善和团结" class="headerlink" title="慈善和团结"></a>慈善和团结</h4><p>慈善是纵向的，来源于由上到下的评判。团结是水平的，有利于平等交流。一个团队要多团结，不要多慈善。</p>
<h4 id="学会从不同视角读你的故事"><a href="#学会从不同视角读你的故事" class="headerlink" title="学会从不同视角读你的故事"></a>学会从不同视角读你的故事</h4><p>花时间从不同视角审视重要的故事，就能尽可能避免挫伤他人的感情，避免人们浪费时间去生气。</p>
<h4 id="领导如何讲故事"><a href="#领导如何讲故事" class="headerlink" title="领导如何讲故事"></a>领导如何讲故事</h4><p>不要把主人公的自我意识加到故事中，那样的话对听众来说，这故事只是属于你的故事，毫无感染力。要控制自我意识。</p>
<h4 id="“我是谁”的故事"><a href="#“我是谁”的故事" class="headerlink" title="“我是谁”的故事"></a>“我是谁”的故事</h4><p>讲故事之前要弄明白这些问题：<br>你是谁？<br>你的特别之处是什么？<br>为何你可以影响他人？<br>人人都有天赋，你的天赋是哪些？<br>你是富有同情，是值得信赖，是诚实，还是圆滑老练？<br>你的什么本领让你有了影响他人的权利？</p>
<h4 id="学会倾听"><a href="#学会倾听" class="headerlink" title="学会倾听"></a>学会倾听</h4><p>无论对方和你的观点多么不可调和，也要深入理解对方的观点，暂时放下自己的观点，这样的倾听才能让你赢得讲诉自己故事的机会。<strong>津津有味地倾听，抱着可能会学到重要知识的期待去倾听。</strong></p>
<h4 id="领导如何讲故事-1"><a href="#领导如何讲故事-1" class="headerlink" title="领导如何讲故事"></a>领导如何讲故事</h4><p>不要把主人公的自我意识加到故事中，那样的话对听众来说，这故事只是属于你的故事，毫无感染力。要控制自我意识。</p>
]]></content>
      
        <categories>
            
            <category> 能力提升 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 团队 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[产品经理的最佳实践]]></title>
      <url>/2016/05/11/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</url>
      <content type="html"><![CDATA[<h4 id="产品经理的职责"><a href="#产品经理的职责" class="headerlink" title="产品经理的职责"></a>产品经理的职责</h4><p> 许多产品经理将大把的时间浪费在与产品无关的工作上，比如，营销管理和项目管理，这些都不是产品经理应该干的活</p>
<h4 id="用户体验"><a href="#用户体验" class="headerlink" title="用户体验"></a>用户体验</h4><p> 对于大多数软件产品来说，用户体验就是产品的生命。产品经理应该与交互设计师、开发人员密切合作，设计良好的用户体验，打造实用价值的产品。<br>  <a id="more"></a></p>
<h4 id="机会评估"><a href="#机会评估" class="headerlink" title="机会评估"></a>机会评估</h4><p> 用方便快捷的机会评估方法取代过时的市场需求文档。动手设计产品前，先明确产品需要解决什么问题，为谁解决问题，以及评估产品的标准。</p>
<h4 id="特约用户"><a href="#特约用户" class="headerlink" title="特约用户"></a>特约用户</h4><p> 打造优秀的产品没有任何捷径，只能请用户反复试用产品，不断改进。</p>
<h4 id="产品原则"><a href="#产品原则" class="headerlink" title="产品原则"></a>产品原则</h4><p> 产品管理工作的主要内容是制定决策。明确的产品原则则可以帮助产品经理和产品团队树立清晰的价值标准，做出果断的依据。</p>
<h4 id="探索【定义】产品"><a href="#探索【定义】产品" class="headerlink" title="探索【定义】产品"></a>探索【定义】产品</h4><p> 产品经理的主要职责是探索（定义）有价值的、可用的、可行的产品。除非产品经理确定这三点，否则同事的努力都将付之东流。</p>
<h4 id="使用原型"><a href="#使用原型" class="headerlink" title="使用原型"></a>使用原型</h4><p> 使用高保真原型是探索产品的关键步骤。原因如下：第一，迫使产品经理深入定义解决方案；第二，可以让真实的用户参与测试、验证产品创意；第三，可以直观地向团队展示产品的设计和思路。</p>
<h4 id="用户参与原型测试"><a href="#用户参与原型测试" class="headerlink" title="用户参与原型测试"></a>用户参与原型测试</h4><p> 有了产品原型，产品经理可以方便地请用户验证产品创意。原型测试是所有产品经理和产品设计师都必须掌握的工作技能。获取有效的用户反馈是产品经理最重要的工作。</p>
<h4 id="根据数据改进产品"><a href="#根据数据改进产品" class="headerlink" title="根据数据改进产品"></a>根据数据改进产品</h4><p> 成功的产品经理懂得利用数据来改进现有产品。改进产品不是根据客户要求一味增加新功能，而是根据产品的实际应用情况，不断地提升产品的各项指标，逐步完善产品。</p>
]]></content>
      
        <categories>
            
            <category> 产品经理 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 产品经理 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[产品经理的反省清单]]></title>
      <url>/2016/05/10/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E7%9A%84%E5%8F%8D%E7%9C%81%E6%B8%85%E5%8D%95/</url>
      <content type="html"><![CDATA[<h3 id="不为失败找借口，只为成功找方法"><a href="#不为失败找借口，只为成功找方法" class="headerlink" title="不为失败找借口，只为成功找方法"></a><strong>不为失败找借口，只为成功找方法</strong></h3><ol>
<li><p>产品能吸引目标消费者的关注吗？</p>
</li>
<li><p>产品的设计是否人性化，易于操作？</p>
</li>
<li><p>产品能在竞争中取胜吗？即使是面对未来风云变化的市场，依旧有取胜的把握吗？</p>
<a id="more"></a>
</li>
<li><p>我了解目标用户吗？产品（不是理想的产品，而是实际开发出来的产品）是否能得到他们的认可？</p>
</li>
<li><p>产品是否有别与市面上的其他产品？我能在两分钟内想公司高管清除地阐明这些差别吗？能在一分钟内向客户解释清除吗？能在半分钟内向经验丰富的行业分析师解释清除吗？</p>
</li>
<li><p>产品能正常运行吗？</p>
</li>
<li><p>产品是否完整？用户对产品的印象如何？销售业绩如何？销售任务能否顺利完成？</p>
</li>
<li><p>产品的特色 是否与目标用户的需求一致？产品特色是否鲜明？</p>
</li>
<li><p>产品值钱吗？值多少钱？为什么值这么多钱？用户会选择更便宜的产品吗？</p>
</li>
<li><p>我了解其他团队成员对产品的看法吗？他们觉得产品好在哪里？他们的看法是否与我的观点一致</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 产品经理 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 产品经理 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
