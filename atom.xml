<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>godkun的博客</title>
  <subtitle>记录学习的技能和遇到的问题</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-06-25T08:17:26.979Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>杨昆</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS之散列</title>
    <link href="http://yoursite.com/2017/06/25/JS%E4%B9%8B%E6%95%A3%E5%88%97/"/>
    <id>http://yoursite.com/2017/06/25/JS之散列/</id>
    <published>2017-06-25T08:17:26.000Z</published>
    <updated>2017-06-25T08:17:26.979Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>react第二节之高质量组件</title>
    <link href="http://yoursite.com/2017/06/25/react%E7%AC%AC%E4%BA%8C%E8%8A%82/"/>
    <id>http://yoursite.com/2017/06/25/react第二节/</id>
    <published>2017-06-25T08:04:30.000Z</published>
    <updated>2017-06-25T20:22:02.859Z</updated>
    
    <content type="html"><![CDATA[<p><strong>学海无涯苦作舟</strong></p>
<h2 id="组件的命名格式"><a href="#组件的命名格式" class="headerlink" title="组件的命名格式"></a>组件的命名格式</h2><blockquote>
<p>首字母大写，后面每个单词的首字也大写。</p>
</blockquote>
<h2 id="组件划分的原则"><a href="#组件划分的原则" class="headerlink" title="组件划分的原则"></a>组件划分的原则</h2><h3 id="高内聚"><a href="#高内聚" class="headerlink" title="高内聚"></a>高内聚</h3><blockquote>
<p>把逻辑紧密相关的内容放在一个组件中。</p>
</blockquote>
<h3 id="低耦合"><a href="#低耦合" class="headerlink" title="低耦合"></a>低耦合</h3><blockquote>
<p>不同组件之间的依赖关系要尽量弱化，也就是每个组件要尽量独立。</p>
</blockquote>
<h2 id="组件的数据种类"><a href="#组件的数据种类" class="headerlink" title="组件的数据种类"></a>组件的数据种类</h2><blockquote>
<p>分为两种：prop 和 state</p>
</blockquote>
<h3 id="如何选择"><a href="#如何选择" class="headerlink" title="如何选择"></a>如何选择</h3><blockquote>
<p>prop是组件的对外接口，state是组件的内部状态。对外用prop，对内用state。</p>
</blockquote>
<h3 id="prop-【property】"><a href="#prop-【property】" class="headerlink" title="prop 【property】"></a>prop 【property】</h3><blockquote>
<p>prop支持的类型非常多，可以是任何一种JavaScript语言支持的数据类型。<br>注意：<strong>当prop的类型不是字符串时，在JSX中必须用花括号 {} 把prop值包住。</strong></p>
</blockquote>
<p>比如下面代码</p>
<figure class="highlight htmlbars"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">App</span></span></span></div><div class="line"><span class="attr">style</span> = <span class="template-variable">&#123;&#123;color: <span class="string">"red"</span>&#125;&#125;</span><span class="xml"><span class="tag"></span></span></div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<p><strong>外层花括号代表是JSX的语法，内层的花括号代表这是一个对象常量。</strong></p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><blockquote>
<p><strong>一旦prop传入组件后，就不能被修改了。如果需要记录自身数据变化，就必须使用state了。</strong>为什么？因为React组件扮演的是render函数的角色，必须是一个没有副作用的纯函数。而修改prop的值，是一个副作用，所以要避免修改。</p>
</blockquote>
<h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><blockquote>
<p>大致步骤：<br>初始化state –&gt; 读取state –&gt; 更新state<br>注意：<strong>组件的state必须是一个JavaScript对象,</strong>哪怕只是一个数字类型的数据，也只能把它存作state某个字段对应的值。</p>
</blockquote>
<h2 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h2><h3 id="装载过程"><a href="#装载过程" class="headerlink" title="装载过程"></a>装载过程</h3><p><strong>依次调用的函数有：</strong></p>
<h4 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h4><blockquote>
<p>ES6中每个类的构造函数。无状态的组件可以不需要定义构造函数，一个React组件需要构造函数，主要是为了这些目的：初始化state；绑定成员函数的this环境。</p>
</blockquote>
<h4 id="getInitialState"><a href="#getInitialState" class="headerlink" title="getInitialState"></a>getInitialState</h4><blockquote>
<p>这个函数的返回值是用来初始化组件的this.state</p>
</blockquote>
<h4 id="getDefaultProps"><a href="#getDefaultProps" class="headerlink" title="getDefaultProps"></a>getDefaultProps</h4><blockquote>
<p>这个函数的返回值作为props的初始值。</p>
</blockquote>
<p>注意：<strong>getInitialState和getDefaultProps这两个方法在ES6的方法定义的React组件中根本用不到</strong>，在ES6中，可以构造函数中通过给this.state赋值完成状态的初始化，通过给类属性defaultProps赋值指定props初始值。</p>
<h4 id="componentWillMount"><a href="#componentWillMount" class="headerlink" title="componentWillMount"></a>componentWillMount</h4><blockquote>
<p>一般不定义这个函数，因为这个时候没有任何渲染出来的结果，即使调用this.setState修改状态也不会引发重新绘制。这个函数存在的目的主要是为了和componentDidMount对称。<br>注意：既可以在服务器端被调用，也可以在浏览器端被调用。</p>
</blockquote>
<h4 id="render"><a href="#render" class="headerlink" title="render"></a>render</h4><blockquote>
<p>是React组件中最重要的函数，任何一个组件都必须要实现render函数，因为React组件的父类React.Component类对render函数没有默认实现，而其他周期函数都有默认实现。<br>注意：<strong>render函数并不做实际的渲染动作，它只是返回一个JSX表示的对象，最终由React来操作渲染过程。有些特殊组件的作用不是渲染界面，那就让render函数返回一个null或者false，这就等于告诉React，这个组件这次不需要渲染任何DOM元素。</strong></p>
</blockquote>
<h4 id="componentDidMount"><a href="#componentDidMount" class="headerlink" title="componentDidMount"></a>componentDidMount</h4><blockquote>
<p>当所有组件的render函数都调用后，通过React库把所有组件返回的结果综合起来，知道如何产生对应的DOM修改，这个时候，才会依次调用各个组件的componentDidMount函数作为装载过程的收尾<br>注意：<strong>componentDidMount只在浏览器端执行，因为”装载“是一个创建组件并放到DOM树上的过程，所以是不可能在服务器端完成的，浏览器端渲染不会产生DOM树。componentDidMount被调用的时候，组件已经被装载到DOM树上了。</strong></p>
</blockquote>
<h3 id="更新过程"><a href="#更新过程" class="headerlink" title="更新过程"></a>更新过程</h3><blockquote>
<p><strong>依次调用的函数有：</strong><br>componentWillReceiveProps<br>shouldComponentUpdate<br>componentWillUpdate<br>render<br>componentDidUpdate<br><strong>更新过程就不细致说了，感觉没什么好讲的。</strong></p>
</blockquote>
<h3 id="卸载过程"><a href="#卸载过程" class="headerlink" title="卸载过程"></a>卸载过程</h3><p><strong>只调用一个函数：</strong></p>
<h4 id="componentWillUnmount"><a href="#componentWillUnmount" class="headerlink" title="componentWillUnmount"></a>componentWillUnmount</h4><blockquote>
<p><strong>如果在componentDidMount中用非React的方法创造了一些DOM元素而不去处理它，那么就很可能会造成内存泄露，这个就需要在componentWillUnmount中把这些创造的DOM元素清理掉。</strong></p>
</blockquote>
<h2 id="总结心得"><a href="#总结心得" class="headerlink" title="总结心得"></a>总结心得</h2><blockquote>
<p>React的学习曲线还是挺陡峭的，组件涉及到的知识有很多，不过这是基础，要认真去解决组件的每个细节，这样才能为你后面学习React的其他高级知识打下坚实的基础。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;学海无涯苦作舟&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;组件的命名格式&quot;&gt;&lt;a href=&quot;#组件的命名格式&quot; class=&quot;headerlink&quot; title=&quot;组件的命名格式&quot;&gt;&lt;/a&gt;组件的命名格式&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;首字母大写
    
    </summary>
    
      <category term="react" scheme="http://yoursite.com/categories/react/"/>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>JS之贪心算法</title>
    <link href="http://yoursite.com/2017/06/24/JS%E4%B9%8B%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2017/06/24/JS之贪心算法/</id>
    <published>2017-06-24T02:23:15.000Z</published>
    <updated>2017-06-24T10:08:16.019Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>贪心法就是遵循某种规则，不断贪心地选取当前最优策略的算法设计方法。<br>贪心算法总是会选择当下的最优解，而不去考虑这一次的选择会不会对未来的选择造成影响。</p>
<h2 id="使用贪心算法的思路"><a href="#使用贪心算法的思路" class="headerlink" title="使用贪心算法的思路"></a>使用贪心算法的思路</h2><blockquote>
<p>使用贪心算法通常表明，实现者希望做出的这一系列局部“最优”选择能够带来最终的整体“最优”选择。如果是这样的话，该算法将会产生一个最优解，否则，则会得到一个次优解。对于很多问题来说，寻找最优解很麻烦，这么做不值得，所以使用贪心算法就足够了。</p>
</blockquote>
<h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h2><a id="more"></a>    
<p>下面用找零做例子</p>
<blockquote>
<p>有1元、5元、10元、25元的整钞，先用这些整钞支付66元，最少需要多少张整钞？</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> makeChange(origAmt, coins) &#123;</div><div class="line">	</div><div class="line">	// 初始化表示剩下的余额，开始设置为0</div><div class="line">	var remainAmt = 0;</div><div class="line">	<span class="keyword">if</span> (origAmt % 25 &lt; origAmt) &#123;</div><div class="line">		coins[3] = parseInt(origAmt / 25)</div><div class="line">		remainAmt = origAmt % 25;</div><div class="line">		origAmt = remainAmt;</div><div class="line">	&#125; </div><div class="line">	<span class="keyword">if</span> (origAmt % 10 &lt; origAmt) &#123;</div><div class="line">		coins[2] = parseInt(origAmt / 10)</div><div class="line">		remainAmt = origAmt % 10;</div><div class="line">		origAmt = remainAmt;</div><div class="line">	&#125; </div><div class="line">	<span class="keyword">if</span> (origAmt % 5 &lt; origAmt) &#123;</div><div class="line">		coins[1] = parseInt(origAmt / 5)</div><div class="line">		remainAmt = origAmt % 5;</div><div class="line">		origAmt = remainAmt;</div><div class="line">	&#125; </div><div class="line">	coins[0] = parseInt(origAmt / 1);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> showChang(coins) &#123;</div><div class="line">	<span class="keyword">if</span>(coins[3] &gt;0 )&#123;</div><div class="line">		console.log(<span class="string">"该硬币的数量是："</span>+coins[3]+<span class="string">"  "</span>+<span class="string">"总面值为："</span>+ coins[3]*25);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>(coins[2] &gt;0 )&#123;</div><div class="line">		console.log(<span class="string">"该硬币的数量是："</span>+coins[2]+<span class="string">"  "</span>+<span class="string">"总面值为："</span>+ coins[2]*10);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>(coins[1] &gt;0 )&#123;</div><div class="line">		console.log(<span class="string">"该硬币的数量是："</span>+coins[1]+<span class="string">"  "</span>+<span class="string">"总面值为："</span>+ coins[1]*5);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>(coins[0] &gt;0 )&#123;</div><div class="line">		console.log(<span class="string">"该硬币的数量是："</span>+coins[0]+<span class="string">"  "</span>+<span class="string">"总面值为："</span>+ coins[0]*1);</div><div class="line">	&#125;	</div><div class="line">&#125;</div><div class="line"></div><div class="line">var origAmt = 66;</div><div class="line">var coins = [];</div><div class="line">makeChange(origAmt, coins);</div><div class="line">showChang(coins);</div></pre></td></tr></table></figure>
<p>输出如下<br><img src="/images/makeChange.png" alt=""></p>
<h2 id="心得体会"><a href="#心得体会" class="headerlink" title="心得体会"></a>心得体会</h2><p>贪心算法很好理解，很经典，掌握其核心：<strong>只关注当下的最优解</strong> 深刻理解就可以很好的运用贪心算法了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;贪心法就是遵循某种规则，不断贪心地选取当前最优策略的算法设计方法。&lt;br&gt;贪心算法总是会选择当下的最优解，而不去考虑这一次的选择会不会对未来的选择造成影响。&lt;/p&gt;
&lt;h2 id=&quot;使用贪心算法的思路&quot;&gt;&lt;a href=&quot;#使用贪心算法的思路&quot; class=&quot;headerlink&quot; title=&quot;使用贪心算法的思路&quot;&gt;&lt;/a&gt;使用贪心算法的思路&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;使用贪心算法通常表明，实现者希望做出的这一系列局部“最优”选择能够带来最终的整体“最优”选择。如果是这样的话，该算法将会产生一个最优解，否则，则会得到一个次优解。对于很多问题来说，寻找最优解很麻烦，这么做不值得，所以使用贪心算法就足够了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;代码如下&quot;&gt;&lt;a href=&quot;#代码如下&quot; class=&quot;headerlink&quot; title=&quot;代码如下&quot;&gt;&lt;/a&gt;代码如下&lt;/h2&gt;
    
    </summary>
    
      <category term="JS世界里的算法" scheme="http://yoursite.com/categories/JS%E4%B8%96%E7%95%8C%E9%87%8C%E7%9A%84%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>sublime3的经典操作和快捷键</title>
    <link href="http://yoursite.com/2017/06/24/sublime3%E7%9A%84%E7%BB%8F%E5%85%B8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://yoursite.com/2017/06/24/sublime3的经典快捷键/</id>
    <published>2017-06-24T02:23:15.000Z</published>
    <updated>2017-06-24T11:40:32.569Z</updated>
    
    <content type="html"><![CDATA[<p><strong>工欲善其事，必先利其器</strong></p>
<blockquote>
<p>以下都是在window操作系统下的快捷键【穷，买不起Mac 囧】</p>
</blockquote>
<h2 id="最爽的快捷键"><a href="#最爽的快捷键" class="headerlink" title="最爽的快捷键"></a>最爽的快捷键</h2><blockquote>
<p>可以进行多行选择以及对选择的多行内容进行同时编辑</p>
</blockquote>
<a id="more"></a>
<p>操作：</p>
<blockquote>
<p>把鼠标放到你想要选取的内容上，不必刻意进行全选，只要光标在所选内容上就可以了，然后<strong>按 Ctrl + D</strong> 那么光标所在的内容将会全部被选中，并且其他的内容会被标记为待选中状态。这个时候<strong>再次点击 D</strong> 那么下面的第一个带选中的将会被选中。<strong>后面再次点击 D</strong> 则下面依次被选中。<strong>如果选中的不是你想要的，需要跳过某一个内容，继续选择后面的未选中的内容。</strong>则需要进行如下操作，<strong>Ctrl + D</strong> 选中不想要的内容后，<strong>按 Ctrl + K 撤销选中，</strong>此时你会看到内容还是选中的，没事，这时你<strong>按 Ctrl + D</strong> 就会看到不想要的内容已经是未选中，并且已经选中了撤销的内容的下面一个待选中的内容了</p>
</blockquote>
<p>还有一种可以实现上面的操作：</p>
<blockquote>
<p><strong>按住 Shift 然后 按住鼠标右键，进行上下拖动。</strong>这个不好说明，只要你按住这两个键，然后试了几下，你就自然知道怎么实现的了。</p>
</blockquote>
<p>对于上面两种操作，我的心得体会是：</p>
<blockquote>
<p>如果是有内容的，比如你已经写好了三个 if 语句，然后选中三个，那么你可以使用第一种操作。<br>如果是没有内容的，你想在空白处写三个 if 语句，你可以使用第二种操作。</p>
</blockquote>
<p>用好这个快捷键，可以极大的提高写代码的效率。</p>
<hr>
<h2 id="最人性化的保存方式"><a href="#最人性化的保存方式" class="headerlink" title="最人性化的保存方式"></a>最人性化的保存方式</h2><blockquote>
<p>用其他编辑器，要想使用某一个类型的文件，需要点击保存，然后弹出命名文件和类型的窗口。<br>用sublime3就可以很完美的使用 Ctrl + n 新建文件，不需要点击保存来选择文件类型，新建后文件格式默认是 text 格式，你可以在界面的右下角看到 Plain Text 字样。<br><strong>这时候按住快捷键 Ctrl + Shift + P 后，会弹出一个对话框，此时输入相应的文件名后缀，就会出现对应的格式选项，选择后，按回车键即可发现文件已经是你想要的格式类型了，后面就可以随心所欲的使用对应文件类型的语法提示了。</strong></p>
</blockquote>
<h2 id="最完美的扩展插件机制"><a href="#最完美的扩展插件机制" class="headerlink" title="最完美的扩展插件机制"></a>最完美的扩展插件机制</h2><p>这个就不说了，插件安装可以网上搜一下。我个人觉得上面两个内容是我最喜欢sublime的原因。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;工欲善其事，必先利其器&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以下都是在window操作系统下的快捷键【穷，买不起Mac 囧】&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;最爽的快捷键&quot;&gt;&lt;a href=&quot;#最爽的快捷键&quot; class=&quot;headerlink&quot; title=&quot;最爽的快捷键&quot;&gt;&lt;/a&gt;最爽的快捷键&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;可以进行多行选择以及对选择的多行内容进行同时编辑&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="编辑器和工具使用" scheme="http://yoursite.com/categories/%E7%BC%96%E8%BE%91%E5%99%A8%E5%92%8C%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="快捷键" scheme="http://yoursite.com/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
  </entry>
  
  <entry>
    <title>JS之动态规划</title>
    <link href="http://yoursite.com/2017/06/23/JS%E4%B9%8B%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <id>http://yoursite.com/2017/06/23/JS之动态规划/</id>
    <published>2017-06-23T11:44:58.000Z</published>
    <updated>2017-06-24T10:24:21.284Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>动态规划方案通常会用一个数组来建立一张表，用于存放被分解众多子问题的解。当算法执行完毕，最终的解将会在这个表中很明显的地方找到。</p>
<h2 id="动态规划与递归的联系"><a href="#动态规划与递归的联系" class="headerlink" title="动态规划与递归的联系"></a>动态规划与递归的联系</h2><p>联系：动态规划有时被认为是一种与递归相反的技术。<br>递归是从顶部开始将问题分解，通过解决掉所有分解出小问题的方式，来解决整个问题。<br>动态规划解决方案从底部开始解决问题，将所有小问题解决掉，然后合并成一个整体方案，从而解决掉整个大问题。</p>
<h2 id="使用思路"><a href="#使用思路" class="headerlink" title="使用思路"></a>使用思路</h2><blockquote>
<p>使用动态规划设计的算法应该从它能解决的最简单的子问题开始，继而通过得到的解，去解决其他更复杂的子问题，直到整个问题都被解决。所有子问题的解通常被存储在一个数组里以便于访问。</p>
</blockquote>
<h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h2><a id="more"></a>    
<p>用斐波那契数列做例子。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> dynFib(n) &#123;</div><div class="line">	</div><div class="line">	// 定义val数组来保存中间结果</div><div class="line">	var val = []</div><div class="line">	<span class="keyword">for</span> (var i = 0; i &lt;= n; i++) &#123;</div><div class="line">		val[i] = 0;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	// 如果斐波那契数是1或者2，则返回1</div><div class="line">	<span class="keyword">if</span> (n==1 || n==2) &#123;</div><div class="line">		<span class="built_in">return</span> 1;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	// 否则，把数值1和2保存在val数组中1和2的位置</div><div class="line">	<span class="keyword">else</span>&#123;</div><div class="line">		val[1] = 1;</div><div class="line">		val[2] = 2;</div><div class="line">	</div><div class="line">	// 从3开始，将数组中的每个元素赋值为前两个元素只和，直到循环结束</div><div class="line">		<span class="keyword">for</span> (var i = 3; i &lt;= n ; i++) &#123;</div><div class="line">			val[i] = val[i-1] + val[i-2];</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		// 返回数组的最后一个元素即为最终计算的斐波那契数值</div><div class="line">		<span class="built_in">return</span> val[n-1];</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var start = new Date().getTime();</div><div class="line"></div><div class="line">console.log(dynFib(30));</div><div class="line">var stop = new Date().getTime();</div><div class="line"></div><div class="line">var result = stop - start;</div><div class="line">console.log(<span class="string">"用时为： "</span>+result+<span class="string">"毫秒"</span>);</div></pre></td></tr></table></figure></p>
<p>输出如下<br><img src="/images/dynamicPlan2.png" alt=""></p>
<h2 id="心得体会"><a href="#心得体会" class="headerlink" title="心得体会"></a>心得体会</h2><p>更深刻的理解了递归的效率为什么很低，就是因为有太多值在递归调用中被重新计算。<br>下面一张图就可以说明它的工作效率为什么这么差。<br><img src="/images/dynamicPlan1.png" alt=""><br>上图是斐波那契函数生成的递归树，从图中就可以看出重复计算了很多值。</p>
<blockquote>
<p>如果编译器可以将已经计算的值记录下来，函数的执行效率就不会很差。动态规划就是用一个数组来存储已经计算过的值，以此来提高效率。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;动态规划方案通常会用一个数组来建立一张表，用于存放被分解众多子问题的解。当算法执行完毕，最终的解将会在这个表中很明显的地方找到。&lt;/p&gt;
&lt;h2 id=&quot;动态规划与递归的联系&quot;&gt;&lt;a href=&quot;#动态规划与递归的联系&quot; class=&quot;headerlink&quot; title=&quot;动态规划与递归的联系&quot;&gt;&lt;/a&gt;动态规划与递归的联系&lt;/h2&gt;&lt;p&gt;联系：动态规划有时被认为是一种与递归相反的技术。&lt;br&gt;递归是从顶部开始将问题分解，通过解决掉所有分解出小问题的方式，来解决整个问题。&lt;br&gt;动态规划解决方案从底部开始解决问题，将所有小问题解决掉，然后合并成一个整体方案，从而解决掉整个大问题。&lt;/p&gt;
&lt;h2 id=&quot;使用思路&quot;&gt;&lt;a href=&quot;#使用思路&quot; class=&quot;headerlink&quot; title=&quot;使用思路&quot;&gt;&lt;/a&gt;使用思路&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;使用动态规划设计的算法应该从它能解决的最简单的子问题开始，继而通过得到的解，去解决其他更复杂的子问题，直到整个问题都被解决。所有子问题的解通常被存储在一个数组里以便于访问。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;代码如下&quot;&gt;&lt;a href=&quot;#代码如下&quot; class=&quot;headerlink&quot; title=&quot;代码如下&quot;&gt;&lt;/a&gt;代码如下&lt;/h2&gt;
    
    </summary>
    
      <category term="JS世界里的算法" scheme="http://yoursite.com/categories/JS%E4%B8%96%E7%95%8C%E9%87%8C%E7%9A%84%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>JS算法之二分查找算法</title>
    <link href="http://yoursite.com/2017/06/23/JS%E7%AE%97%E6%B3%95%E4%B9%8B%E4%BA%8C%E5%88%86%E6%B3%95%E6%9F%A5%E6%89%BE/"/>
    <id>http://yoursite.com/2017/06/23/JS算法之二分法查找/</id>
    <published>2017-06-23T05:44:58.000Z</published>
    <updated>2017-06-23T11:12:51.296Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>字面意识上就是</p>
<h2 id="使用前提"><a href="#使用前提" class="headerlink" title="使用前提"></a>使用前提</h2><p>数据要是有序的，对无序的数据无效。</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>1：将数组的第一个元素的位置设置为下边界【0】<br>2：将数组的最后一个元素的位置设置为上边界【数组的长度减1】<br>3：若下边界等于或小于上边界，则作如下操作。</p>
<blockquote>
<p>   a. 将中点设置为【上边界加下边界】除以2.<br>    b. 如果中点的元素小于查询的值，则将下边界设置为中点元素所在下标加1。<br>    c. 如果中点的元素大于查询的值，则将上边界设置为中点元素所在下标减1。<br>    d. 否则中点元素即为要查找的数据，可以进行返回。</p>
</blockquote>
<h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h2><a id="more"></a>    
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> binSearch(arr, data) &#123;</div><div class="line">	</div><div class="line">	// 上界</div><div class="line">	var upperBound = arr.length-1;</div><div class="line">	</div><div class="line">	// 下界</div><div class="line">	var lowerBound = 0;</div><div class="line">	</div><div class="line">	<span class="keyword">while</span> (lowerBound &lt; upperBound) &#123;</div><div class="line">	</div><div class="line">		// 取中值</div><div class="line">		var mid = Math.floor((lowerBound+upperBound)/2);</div><div class="line">		</div><div class="line">		// 改变上界或者下界的值</div><div class="line">		<span class="keyword">if</span>(arr[mid] &lt; data)&#123;</div><div class="line">			lowerBound = mid + 1;</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(arr[mid] &gt; data)&#123;</div><div class="line">			upperBound = mid - 1;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="built_in">return</span> mid; </div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">		<span class="built_in">return</span> -1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var nums = [];</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="built_in">let</span> i = 0; i &lt; 100; i++) &#123;</div><div class="line">	</div><div class="line">	// 0到100的整数</div><div class="line">	nums[i] = Math.floor(Math.random()*100);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//  对数组排序</div><div class="line">var sortNums = nums.sort();</div><div class="line"></div><div class="line">// 不换行打印排序后的数组</div><div class="line">console.log(sortNums+<span class="string">" "</span>);</div><div class="line"></div><div class="line">// 设置需要找的数据</div><div class="line">var val = 38;</div><div class="line"></div><div class="line">// 调用二分查找函数</div><div class="line">var retval = binSearch(sortNums,val);</div><div class="line"></div><div class="line">// 判断是否存在，存在的话将位置打印出来</div><div class="line"><span class="keyword">if</span> (retval &gt; 0) &#123;</div><div class="line">	console.log(<span class="string">"已经找到"</span>+val+<span class="string">"所在位置为："</span> + retval);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">	console.log(val + <span class="string">"没有出现在这个数组中"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出如下<br><img src="/images/binSearch.png" alt=""></p>
<h2 id="心得体会"><a href="#心得体会" class="headerlink" title="心得体会"></a>心得体会</h2><blockquote>
<p>对于二分查找法需要有序数据的这个前提条件感到不太满意，无形中是效率变低。不过相对于顺序查找，在处理大数据集时，速度要明显快。因为决定算法性能的每一步循环嵌套中，二分查找减少了一半的查找量（数组中的元素）。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;字面意识上就是&lt;/p&gt;
&lt;h2 id=&quot;使用前提&quot;&gt;&lt;a href=&quot;#使用前提&quot; class=&quot;headerlink&quot; title=&quot;使用前提&quot;&gt;&lt;/a&gt;使用前提&lt;/h2&gt;&lt;p&gt;数据要是有序的，对无序的数据无效。&lt;/p&gt;
&lt;h2 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title=&quot;步骤&quot;&gt;&lt;/a&gt;步骤&lt;/h2&gt;&lt;p&gt;1：将数组的第一个元素的位置设置为下边界【0】&lt;br&gt;2：将数组的最后一个元素的位置设置为上边界【数组的长度减1】&lt;br&gt;3：若下边界等于或小于上边界，则作如下操作。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;   a. 将中点设置为【上边界加下边界】除以2.&lt;br&gt;    b. 如果中点的元素小于查询的值，则将下边界设置为中点元素所在下标加1。&lt;br&gt;    c. 如果中点的元素大于查询的值，则将上边界设置为中点元素所在下标减1。&lt;br&gt;    d. 否则中点元素即为要查找的数据，可以进行返回。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;代码如下&quot;&gt;&lt;a href=&quot;#代码如下&quot; class=&quot;headerlink&quot; title=&quot;代码如下&quot;&gt;&lt;/a&gt;代码如下&lt;/h2&gt;
    
    </summary>
    
      <category term="JS世界里的算法" scheme="http://yoursite.com/categories/JS%E4%B8%96%E7%95%8C%E9%87%8C%E7%9A%84%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>react第一节</title>
    <link href="http://yoursite.com/2017/06/22/react%E7%AC%AC%E4%B8%80%E8%8A%82/"/>
    <id>http://yoursite.com/2017/06/22/react第一节/</id>
    <published>2017-06-22T13:52:24.000Z</published>
    <updated>2017-06-25T18:48:58.006Z</updated>
    
    <content type="html"><![CDATA[<h2 id="命名由来"><a href="#命名由来" class="headerlink" title="命名由来"></a>命名由来</h2><blockquote>
<p>React践行的是“响应式编程”思想，也就是 Reactive Programing</p>
</blockquote>
<h2 id="React-的核心思想"><a href="#React-的核心思想" class="headerlink" title="React 的核心思想"></a>React 的核心思想</h2><p><strong>通过组件来开发应用。</strong></p>
<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>所谓组件，指的是能完成某个特定功能的独立的、重用的代码。</p>
<p><strong>基于组件的应用开发是广泛使用的软件开发模式。</strong></p>
<h2 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h2><p>全称：JavaScript eXtension<br>目的：让我们可以在JS中编写像HTML一样的代码。<br>一种JavaScript的数据结构，不是真正的HTML，也和DOM没有关系，其实就是React.createElement写法的语法糖，是快速高效书写这个函数的方法，它返回的是ReactElement。</p>
<blockquote>
<p>JSX不能直接在浏览器中使用，需要转义成标准的JS语法，而JS编译器Babel就是目前最好的JSX的转义工具。</p>
</blockquote>
<a id="more"></a>
<h2 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h2><p>是什么：一个JavaScript编译器。<br>作用：一个是让代码支持ES6的语法，一个是支持React的一些特性（例如JSX语法）。</p>
<h2 id="Virtual-DOM-【虚拟DOM】"><a href="#Virtual-DOM-【虚拟DOM】" class="headerlink" title="Virtual DOM 【虚拟DOM】"></a>Virtual DOM 【虚拟DOM】</h2><p>目的：尽量减少DOM操作<br><strong>每个React组件都是用虚拟DOM渲染的。</strong></p>
<blockquote>
<p>DOM树是对HTML的抽象，那Virtual DOM就是对DOM树的抽象。组件的DOM结构映射到虚拟DOM上，当需要重新渲染组件时，React在虚拟DOM上实现了一个 Diff 算法，通过这个算法寻找需要变更的节点，再把里面的修改更新到实际需要修改的DOM节点上，这样就避免了整个渲染DOM带来的巨大成本。</p>
</blockquote>
<p>## </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;命名由来&quot;&gt;&lt;a href=&quot;#命名由来&quot; class=&quot;headerlink&quot; title=&quot;命名由来&quot;&gt;&lt;/a&gt;命名由来&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;React践行的是“响应式编程”思想，也就是 Reactive Programing&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;React-的核心思想&quot;&gt;&lt;a href=&quot;#React-的核心思想&quot; class=&quot;headerlink&quot; title=&quot;React 的核心思想&quot;&gt;&lt;/a&gt;React 的核心思想&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;通过组件来开发应用。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;组件&quot;&gt;&lt;a href=&quot;#组件&quot; class=&quot;headerlink&quot; title=&quot;组件&quot;&gt;&lt;/a&gt;组件&lt;/h2&gt;&lt;p&gt;所谓组件，指的是能完成某个特定功能的独立的、重用的代码。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基于组件的应用开发是广泛使用的软件开发模式。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;JSX&quot;&gt;&lt;a href=&quot;#JSX&quot; class=&quot;headerlink&quot; title=&quot;JSX&quot;&gt;&lt;/a&gt;JSX&lt;/h2&gt;&lt;p&gt;全称：JavaScript eXtension&lt;br&gt;目的：让我们可以在JS中编写像HTML一样的代码。&lt;br&gt;一种JavaScript的数据结构，不是真正的HTML，也和DOM没有关系，其实就是React.createElement写法的语法糖，是快速高效书写这个函数的方法，它返回的是ReactElement。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;JSX不能直接在浏览器中使用，需要转义成标准的JS语法，而JS编译器Babel就是目前最好的JSX的转义工具。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="react" scheme="http://yoursite.com/categories/react/"/>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>算法中的常见的单词【一直更新】</title>
    <link href="http://yoursite.com/2017/06/22/%E7%AE%97%E6%B3%95%E4%B8%AD%E7%9A%84%E5%B8%B8%E8%A7%81%E7%9A%84%E5%8D%95%E8%AF%8D/"/>
    <id>http://yoursite.com/2017/06/22/算法中的常见的单词/</id>
    <published>2017-06-22T06:05:48.000Z</published>
    <updated>2017-06-24T02:54:37.492Z</updated>
    
    <content type="html"><![CDATA[<p>upperBound : 上边界<br>lowerBound :  下边界<br>tonken : 在词法分析中是标记的意识<br>capacity : 容量</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;upperBound : 上边界&lt;br&gt;lowerBound :  下边界&lt;br&gt;tonken : 在词法分析中是标记的意识&lt;br&gt;capacity : 容量&lt;/p&gt;

    
    </summary>
    
      <category term="JS" scheme="http://yoursite.com/categories/JS/"/>
    
    
      <category term="JS英语单词" scheme="http://yoursite.com/tags/JS%E8%8B%B1%E8%AF%AD%E5%8D%95%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>《暗时间》读书笔记</title>
    <link href="http://yoursite.com/2017/06/21/%E6%9A%97%E6%97%B6%E9%97%B4/"/>
    <id>http://yoursite.com/2017/06/21/暗时间/</id>
    <published>2017-06-21T09:44:05.000Z</published>
    <updated>2017-06-22T13:21:07.693Z</updated>
    
    <content type="html"><![CDATA[<p><strong>波普尔曾经说过：人生不过是解决问题。</strong></p>
<p>挑几个重要的收获说吧：</p>
<p><strong>你比别人往后多看一年，你就比别人领先一年的时间来准备。</strong></p>
<p>思考问题，去追寻答案的时候，一定要学会联想。</p>
<p>一定不要把简单的事情搞复杂。<br><a id="more"></a></p>
<p>遇到问题一定要自己动手，不要直接问答案。</p>
<p>坚持写博客，记录笔记，与自己对话。</p>
<p>找到你的不可替代性和核心竞争力。</p>
<p>兴趣遍地都是，专注和持之以恒才是真正稀缺的。</p>
<p>过早退出是一切失败的根源。</p>
<p>生活中的选择远比我们想象的要多，细微的选择差异造就了不同的人生。</p>
<p>一生的知识积累，自学的起码占90%</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;波普尔曾经说过：人生不过是解决问题。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;挑几个重要的收获说吧：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;你比别人往后多看一年，你就比别人领先一年的时间来准备。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;思考问题，去追寻答案的时候，一定要学会联想。&lt;/p&gt;
&lt;p&gt;一定不要把简单的事情搞复杂。&lt;br&gt;
    
    </summary>
    
      <category term="能力提升" scheme="http://yoursite.com/categories/%E8%83%BD%E5%8A%9B%E6%8F%90%E5%8D%87/"/>
    
    
      <category term="读书笔记" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>算法的本质</title>
    <link href="http://yoursite.com/2017/06/20/%E7%AE%97%E6%B3%95%E7%9A%84%E6%9C%AC%E8%B4%A8/"/>
    <id>http://yoursite.com/2017/06/20/算法的本质/</id>
    <published>2017-06-20T13:25:42.000Z</published>
    <updated>2017-06-24T10:27:28.191Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h2><p><strong>算法本质上可以看做是在一个解空间当中的搜索问题，所以要分析一个算法的好坏，首先要弄清它的解空间的结构，然后分析它是怎么来探索这个解空间的。</strong></p>
<h2 id="如何弄清解空间"><a href="#如何弄清解空间" class="headerlink" title="如何弄清解空间"></a>如何弄清解空间</h2><blockquote>
<p>举个例子，例如排序算法，其解空间可以看做是所有可能的下标排列组合，其中有且仅有一个排列是正确的排序排列，这里假设元素各不相同，那么一个算法在探索这个解空间方面的行为就决定了它的效率高低，最简单的，如果一个算法每次都只能检查解空间中的一个点，那么这个算法的复杂度就是解空间的大小。</p>
</blockquote>
<p>对排序算法而言也就是 n! 。从这个角度来看，我们很容易地发现，<strong>所有基于比较的排序算法，其复杂度为什么是以O(nlogn)为下界的，因为一次比较操作最多有两个结果，a&gt;b或b&gt;a，既然只有两种结果，那么最多只能将空间进行二分，如果每次都能完美地二分，那么找到那个唯一点最终需要的步骤就是log(n!) = O(nlogn)。</strong><br>这样就不难理解为什么基于比较的排序算法的复杂度最好不过如此了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;本质&quot;&gt;&lt;a href=&quot;#本质&quot; class=&quot;headerlink&quot; title=&quot;本质&quot;&gt;&lt;/a&gt;本质&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;算法本质上可以看做是在一个解空间当中的搜索问题，所以要分析一个算法的好坏，首先要弄清它的解空间的结构，然后分析它是怎么来探索
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>学习react遇到的英文单词【一直更新】</title>
    <link href="http://yoursite.com/2017/06/18/JS%E4%B8%AD%E7%BA%A6%E5%AE%9A%E4%BF%97%E6%88%90%E7%9A%84%E8%8B%B1%E8%AF%AD%E5%8D%95%E8%AF%8D%E7%9A%84%E6%84%8F%E8%AF%86/"/>
    <id>http://yoursite.com/2017/06/18/JS中约定俗成的英语单词的意识/</id>
    <published>2017-06-18T07:50:43.000Z</published>
    <updated>2017-06-22T13:19:24.122Z</updated>
    
    <content type="html"><![CDATA[<p>eject：弹射<br>delegation：委托<br>bable：嘈杂声<br>loader：处理机，装货机<br>dispatcher：调度者<br>emit：发出，广播<br>react：反应<br>Redux: reducer + flux</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;eject：弹射&lt;br&gt;delegation：委托&lt;br&gt;bable：嘈杂声&lt;br&gt;loader：处理机，装货机&lt;br&gt;dispatcher：调度者&lt;br&gt;emit：发出，广播&lt;br&gt;react：反应&lt;br&gt;Redux: reducer + flux&lt;/p&gt;

    
    </summary>
    
      <category term="JS" scheme="http://yoursite.com/categories/JS/"/>
    
    
      <category term="JS英语单词" scheme="http://yoursite.com/tags/JS%E8%8B%B1%E8%AF%AD%E5%8D%95%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>产品经理之过滤法则</title>
    <link href="http://yoursite.com/2017/06/10/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E4%B9%8B%E8%BF%87%E6%BB%A4%E6%B3%95%E5%88%99/"/>
    <id>http://yoursite.com/2017/06/10/产品经理之过滤法则/</id>
    <published>2017-06-09T16:00:00.000Z</published>
    <updated>2017-06-17T06:46:40.777Z</updated>
    
    <content type="html"><![CDATA[<p><strong>序：有时候智商够了，事情就没有必要说那么清楚了</strong></p>
<h2 id="直接取精华"><a href="#直接取精华" class="headerlink" title="直接取精华"></a>直接取精华</h2><p>一个好的0怎样产生？这里有8问可以给你灵感。</p>
<p>这个概念的原始出处是哪里，全球最佳实践在哪里？</p>
<p>这个概念能为它的目标用户带来什么？</p>
<p>进入的壁垒是否过高或过低？</p>
<p>那些用户会从中受益，他们是男是女，年龄多大，用户多少？</p>
<p>这个概念是否有商业模式？</p>
<p>是否可以成为平台或现金牛，在公司战略布局中处于什么位置？</p>
<h2 id="名词解释："><a href="#名词解释：" class="headerlink" title="名词解释："></a>名词解释：</h2><a id="more"></a>
<p>平台产品是什么？</p>
<blockquote>
<p>通过自身的优势拉动其他产品的产品，这是公司的基石。<br>衡量一款产品的平台性质时，它的用户数是最关键核心的指标。</p>
</blockquote>
<p>现金牛产品是什么？</p>
<blockquote>
<p>利润率超高的产品，并且利润占据公司总利润的比例很大。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;序：有时候智商够了，事情就没有必要说那么清楚了&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;直接取精华&quot;&gt;&lt;a href=&quot;#直接取精华&quot; class=&quot;headerlink&quot; title=&quot;直接取精华&quot;&gt;&lt;/a&gt;直接取精华&lt;/h2&gt;&lt;p&gt;一个好的0怎样产生？这里有8问可以给你灵感。&lt;/p&gt;
&lt;p&gt;这个概念的原始出处是哪里，全球最佳实践在哪里？&lt;/p&gt;
&lt;p&gt;这个概念能为它的目标用户带来什么？&lt;/p&gt;
&lt;p&gt;进入的壁垒是否过高或过低？&lt;/p&gt;
&lt;p&gt;那些用户会从中受益，他们是男是女，年龄多大，用户多少？&lt;/p&gt;
&lt;p&gt;这个概念是否有商业模式？&lt;/p&gt;
&lt;p&gt;是否可以成为平台或现金牛，在公司战略布局中处于什么位置？&lt;/p&gt;
&lt;h2 id=&quot;名词解释：&quot;&gt;&lt;a href=&quot;#名词解释：&quot; class=&quot;headerlink&quot; title=&quot;名词解释：&quot;&gt;&lt;/a&gt;名词解释：&lt;/h2&gt;
    
    </summary>
    
      <category term="0到1" scheme="http://yoursite.com/categories/0%E5%88%B01/"/>
    
    
      <category term="产品经理" scheme="http://yoursite.com/tags/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>JS之快速排序</title>
    <link href="http://yoursite.com/2017/05/19/%E7%AE%97%E6%B3%95%E7%95%8C%E7%9A%84%E9%BB%91%E9%AD%94%E6%B3%95%E4%B9%8B%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2017/05/19/算法界的黑魔法之快速排序/</id>
    <published>2017-05-19T11:40:00.000Z</published>
    <updated>2017-06-23T02:05:26.398Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>一种分而治之的算法，通过递归的方式依次分解为包含较小元素和较大元素的不同子序列。然后不断重复这个步骤直到所有数据都是有序的。</p>
<h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>平均时间复杂度为O(nlogn)</p>
<h2 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h2><p>1：选择一个基准元素，将列表分隔成两个子序列；<br>2：对列表进行重新排序，将所有小于基准值的元素放在基准值的前面，所有大于基准值的元素放在基准值的后面；<br>3：分别对较小元素的子序列和较大元素的子序列重复步骤1和2。</p>
<h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h2><a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> qSort(list) &#123;</div><div class="line">	<span class="keyword">if</span> (list.length==0) &#123;</div><div class="line">		<span class="built_in">return</span> [];</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	//定义一个基准值</div><div class="line">	var pivot = list[0];</div><div class="line">	</div><div class="line">	//用于放小于基准值的元素的数组</div><div class="line">	var lesser = [];</div><div class="line">	</div><div class="line">	//用于放大于基准值的元素的数组</div><div class="line">	var greater = [];</div><div class="line">	</div><div class="line">	<span class="keyword">for</span> (<span class="built_in">let</span> i = 1 ; i &lt; list.length; i++) &#123;	</div><div class="line">		<span class="keyword">if</span> (list[i]&lt;pivot) &#123;</div><div class="line">			lesser.push(list[i]);</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			greater.push(list[i]);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	//使用了递归,将lesser数组、基准值pivot和greater数组依次连接起来构成新的数组</div><div class="line">	<span class="built_in">return</span> qSort(lesser).concat(pivot,qSort(greater));</div><div class="line">&#125;</div><div class="line"></div><div class="line">var a = [];</div><div class="line"><span class="keyword">for</span> (<span class="built_in">let</span> i = 0; i &lt; 10; i++) &#123;</div><div class="line">	a[i] = Math.floor((Math.random()*10)+1);</div><div class="line">&#125;</div><div class="line"></div><div class="line">console.log(a);</div><div class="line">console.log(qSort(a));</div></pre></td></tr></table></figure>
<p>输出如下<br><img src="/images/qSort.png" alt=""></p>
<h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>根据我的测试，快速排序算法非常适用于大型数据集合，可是在处理小数据集合时性能反而会下降。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;一种分而治之的算法，通过递归的方式依次分解为包含较小元素和较大元素的不同子序列。然后不断重复这个步骤直到所有数据都是有序的。&lt;/p&gt;
&lt;h2 id=&quot;时间复杂度&quot;&gt;&lt;a href=&quot;#时间复杂度&quot; class=&quot;headerlink&quot; title=&quot;时间复杂度&quot;&gt;&lt;/a&gt;时间复杂度&lt;/h2&gt;&lt;p&gt;平均时间复杂度为O(nlogn)&lt;/p&gt;
&lt;h2 id=&quot;算法步骤&quot;&gt;&lt;a href=&quot;#算法步骤&quot; class=&quot;headerlink&quot; title=&quot;算法步骤&quot;&gt;&lt;/a&gt;算法步骤&lt;/h2&gt;&lt;p&gt;1：选择一个基准元素，将列表分隔成两个子序列；&lt;br&gt;2：对列表进行重新排序，将所有小于基准值的元素放在基准值的前面，所有大于基准值的元素放在基准值的后面；&lt;br&gt;3：分别对较小元素的子序列和较大元素的子序列重复步骤1和2。&lt;/p&gt;
&lt;h2 id=&quot;代码如下&quot;&gt;&lt;a href=&quot;#代码如下&quot; class=&quot;headerlink&quot; title=&quot;代码如下&quot;&gt;&lt;/a&gt;代码如下&lt;/h2&gt;
    
    </summary>
    
      <category term="JS世界里的算法" scheme="http://yoursite.com/categories/JS%E4%B8%96%E7%95%8C%E9%87%8C%E7%9A%84%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>用Axure写产品需求文档</title>
    <link href="http://yoursite.com/2017/05/11/%E7%94%A8Axure%E5%86%99%E4%BA%A7%E5%93%81%E9%9C%80%E6%B1%82%E6%96%87%E6%A1%A3/"/>
    <id>http://yoursite.com/2017/05/11/用Axure写产品需求文档/</id>
    <published>2017-05-11T08:09:03.000Z</published>
    <updated>2017-06-17T08:11:16.356Z</updated>
    
    <content type="html"><![CDATA[<p>链接如下：</p>
<p><a href="http://www.jianshu.com/p/2006f660d2b0" target="_blank" rel="external">http://www.jianshu.com/p/2006f660d2b0</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接如下：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/2006f660d2b0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/2006f660d2b0&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Axure" scheme="http://yoursite.com/categories/Axure/"/>
    
    
      <category term="Axure" scheme="http://yoursite.com/tags/Axure/"/>
    
  </entry>
  
  <entry>
    <title>前端进阶文章目录</title>
    <link href="http://yoursite.com/2017/05/11/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95/"/>
    <id>http://yoursite.com/2017/05/11/前端进阶文章目录/</id>
    <published>2017-05-11T08:09:03.000Z</published>
    <updated>2017-06-18T09:22:25.706Z</updated>
    
    <content type="html"><![CDATA[<h2 id="很棒的文章，看完进阶没有问题。"><a href="#很棒的文章，看完进阶没有问题。" class="headerlink" title="很棒的文章，看完进阶没有问题。"></a>很棒的文章，看完进阶没有问题。</h2><p>前端基础进阶（一）：内存空间详细图解<br><a href="http://www.jianshu.com/p/996671d4dcc4" target="_blank" rel="external">http://www.jianshu.com/p/996671d4dcc4</a></p>
<p>前端基础进阶（二）：执行上下文详细图解<br><a href="http://www.jianshu.com/p/a6d37c77e8db" target="_blank" rel="external">http://www.jianshu.com/p/a6d37c77e8db</a><br><a id="more"></a></p>
<p>前端基础进阶（三）：变量对象详解<br><a href="http://www.jianshu.com/p/330b1505e41d" target="_blank" rel="external">http://www.jianshu.com/p/330b1505e41d</a></p>
<p>前端基础进阶（四）：详细图解作用域链与闭包<br><a href="http://www.jianshu.com/p/21a16d44f150" target="_blank" rel="external">http://www.jianshu.com/p/21a16d44f150</a></p>
<p>前端基础进阶（五）：全方位解读this<br><a href="http://www.jianshu.com/p/d647aa6d1ae6" target="_blank" rel="external">http://www.jianshu.com/p/d647aa6d1ae6</a></p>
<p>前端基础进阶（六）：在chrome开发者工具中观察函数调用栈、作用域链与闭包<br><a href="http://www.jianshu.com/p/73122bb3d262" target="_blank" rel="external">http://www.jianshu.com/p/73122bb3d262</a></p>
<p>前端基础进阶（七）：函数与函数式编程<br><a href="http://www.jianshu.com/p/69dede6f7e5f" target="_blank" rel="external">http://www.jianshu.com/p/69dede6f7e5f</a></p>
<p>前端基础进阶（八）：深入详解函数的柯里化<br><a href="http://www.jianshu.com/p/5e1899fe7d6b" target="_blank" rel="external">http://www.jianshu.com/p/5e1899fe7d6b</a></p>
<p>前端基础进阶（九）：详解面向对象、构造函数、原型与原型链<br><a href="http://www.jianshu.com/p/15ac7393bc1f" target="_blank" rel="external">http://www.jianshu.com/p/15ac7393bc1f</a></p>
<p>前端基础进阶（十）：面向对象实战之封装拖拽对象<br><a href="http://www.jianshu.com/p/b3dee0e84454" target="_blank" rel="external">http://www.jianshu.com/p/b3dee0e84454</a></p>
<p>前端基础进阶（十一）：详细图解jQuery对象，以及如何扩展jQuery插件<br><a href="http://www.jianshu.com/p/3f97570d22b4" target="_blank" rel="external">http://www.jianshu.com/p/3f97570d22b4</a></p>
<p>前端基础进阶（十二）：深入核心，详解事件循环机制<br><a href="http://www.jianshu.com/p/12b9f73c5a4f" target="_blank" rel="external">http://www.jianshu.com/p/12b9f73c5a4f</a></p>
<p>前端基础进阶（十三）：Promise使用详解<br><a href="http://www.jianshu.com/p/fe5f173276bd" target="_blank" rel="external">http://www.jianshu.com/p/fe5f173276bd</a></p>
<p>前端基础进阶（十四）：ES6基础知识合集<br><a href="http://www.jianshu.com/p/cfb0893c34f1" target="_blank" rel="external">http://www.jianshu.com/p/cfb0893c34f1</a></p>
<p>前端基础进阶（十五）：详解 ES6 Modules<br><a href="http://www.jianshu.com/p/3f97570d22b4" target="_blank" rel="external">http://www.jianshu.com/p/3f97570d22b4</a></p>
<p>我想这将是最有价值的react入门与进阶教程<br><a href="http://www.jianshu.com/p/83bda9cd8c67" target="_blank" rel="external">http://www.jianshu.com/p/83bda9cd8c67</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;很棒的文章，看完进阶没有问题。&quot;&gt;&lt;a href=&quot;#很棒的文章，看完进阶没有问题。&quot; class=&quot;headerlink&quot; title=&quot;很棒的文章，看完进阶没有问题。&quot;&gt;&lt;/a&gt;很棒的文章，看完进阶没有问题。&lt;/h2&gt;&lt;p&gt;前端基础进阶（一）：内存空间详细图解&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/p/996671d4dcc4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/996671d4dcc4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;前端基础进阶（二）：执行上下文详细图解&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/p/a6d37c77e8db&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/a6d37c77e8db&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="this" scheme="http://yoursite.com/tags/this/"/>
    
      <category term="Promise" scheme="http://yoursite.com/tags/Promise/"/>
    
      <category term="Jquery" scheme="http://yoursite.com/tags/Jquery/"/>
    
  </entry>
  
  <entry>
    <title>JS之冒泡排序</title>
    <link href="http://yoursite.com/2017/05/10/JS%E4%B9%8B%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2017/05/10/JS之冒泡排序/</id>
    <published>2017-05-10T08:40:03.000Z</published>
    <updated>2017-06-18T09:21:43.795Z</updated>
    
    <content type="html"><![CDATA[<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><blockquote>
<p>通俗的说就是把一堆数放进有序数组里，然后从第一个数开始，依次比较自己和后一个数的值，如果需要输出升序排列，那就要把大的数放在后面，于是很自然的想到如果自己比后一个数大，那就要互相交换值，如果不大，则不需要交换。依次往后循环即可完成升序排序。降序排列同理。</p>
</blockquote>
<h2 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h2><p>1：比较相邻的元素。如果第一个比第二个大，就互相交换。</p>
<p>2：对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。做完后，最后的元素会将是最大的数。</p>
<p>3：针对所有的元素重复以上的步骤，除了最后一个。</p>
<p>JS代码如下：<br><a id="more"></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> bubbleSort(arr) &#123;</div><div class="line">    var len = arr.length;</div><div class="line">    <span class="keyword">for</span> (var i = 0; i &lt; len - 1; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (var j = 0; j &lt; len - 1 - i; j++) &#123;</div><div class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j+1]) &#123;        // 相邻元素两两对比</div><div class="line">                var temp = arr[j+1];        // 元素交换</div><div class="line">                arr[j+1] = arr[j];</div><div class="line">                arr[j] = temp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    console.log(arr);</div><div class="line">&#125;</div><div class="line"></div><div class="line">bubbleSort([5,4,3,2,1]);</div></pre></td></tr></table></figure></p>
<blockquote>
<p>将上面程序保存名为 bubbleSort 的 js 文件，然后进入 bubbleSort 所在的目录下，用 node bubbleSort.js 命令运行程序，结果如下图。</p>
</blockquote>
<p><img src="/images/bubbleSort.png" alt=""></p>
<h2 id="算法性能分析"><a href="#算法性能分析" class="headerlink" title="算法性能分析"></a>算法性能分析</h2><blockquote>
<p>由于嵌套两层 for 循环，导致时间复杂度为 <strong>O(n2)</strong>，n2 是 n 的平方的意识。当 n 很大的时候，性能非常差。所以仅仅只适合 n 很小的情况。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;冒泡排序&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;通俗的说就是把一堆数放进有序数组里，然后从第一个数开始，依次比较自己和后一个数的值，如果需要输出升序排列，那就要把大的数放在后面，于是很自然的想到如果自己比后一个数大，那就要互相交换值，如果不大，则不需要交换。依次往后循环即可完成升序排序。降序排列同理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;算法步骤&quot;&gt;&lt;a href=&quot;#算法步骤&quot; class=&quot;headerlink&quot; title=&quot;算法步骤&quot;&gt;&lt;/a&gt;算法步骤&lt;/h2&gt;&lt;p&gt;1：比较相邻的元素。如果第一个比第二个大，就互相交换。&lt;/p&gt;
&lt;p&gt;2：对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。做完后，最后的元素会将是最大的数。&lt;/p&gt;
&lt;p&gt;3：针对所有的元素重复以上的步骤，除了最后一个。&lt;/p&gt;
&lt;p&gt;JS代码如下：&lt;br&gt;
    
    </summary>
    
      <category term="JS世界里的算法" scheme="http://yoursite.com/categories/JS%E4%B8%96%E7%95%8C%E9%87%8C%E7%9A%84%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>彻底征服闭包定义、特点、价值、用法</title>
    <link href="http://yoursite.com/2017/04/10/2017-04-10-%E5%BD%BB%E5%BA%95%E5%BE%81%E6%9C%8D%E9%97%AD%E5%8C%85/"/>
    <id>http://yoursite.com/2017/04/10/2017-04-10-彻底征服闭包/</id>
    <published>2017-04-09T16:00:00.000Z</published>
    <updated>2017-06-12T08:59:09.488Z</updated>
    
    <content type="html"><![CDATA[<h3 id="闭包的定义与含义"><a href="#闭包的定义与含义" class="headerlink" title="闭包的定义与含义"></a>闭包的定义与含义</h3><p> <strong>闭：是指闭包的内部环境对外部不可见。</strong></p>
<p>   闭包具有<strong>控制外部域的能力，也就是可以访问外部环境的执行域，</strong>，同时又能<strong>防止外部域对闭包的反向控制，</strong>也就是说，<strong>闭包的领域是对外封闭的。</strong><br><a id="more"></a></p>
<h3 id="闭包的实现方法"><a href="#闭包的实现方法" class="headerlink" title="闭包的实现方法"></a><strong>闭包的实现方法</strong></h3><p> <strong>JS闭包是通过function实现的</strong></p>
<h3 id="闭包的特权"><a href="#闭包的特权" class="headerlink" title="闭包的特权"></a><strong>闭包的特权</strong></h3><p> <strong>闭包内声明的变量，闭包外的任何环境都无法访问。</strong><br>举个栗子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">     <span class="keyword">var</span> a=<span class="number">10</span>;</div><div class="line">     <span class="keyword">var</span> b=<span class="number">20</span>;</div><div class="line">     <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;      </div><div class="line">          <span class="built_in">console</span>.log(a);         </div><div class="line">     &#125;;</div><div class="line">     <span class="keyword">return</span> f2;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> result =f1();</div><div class="line">result();</div></pre></td></tr></table></figure></p>
<p>这里的闭包是f1函数，不懂没关系，下面我会运用这个例子上面写的知识来去解释为什么f1是闭包。</p>
<p>在上面的代码中，函数f2就被包括在函数f1内部，这时f1内部的所有局部变量，对f2都是可见的，但是反过来就不行，f2内部的局部变量对f1就是不可见的。<br>既然<strong>f2可以读取f1中的局部变量，那么只要把f2作为返回值，我们就可以在f1外部读取它的内部变量！</strong><br><strong>这种函数叫称之为闭包函数。</strong><br>所以，这个困扰初学者到底哪个是闭包的问题也就解决了，顺着这个思路你就会发现变量a和变量b也是闭包的一部分，因为他们对外不可见。<br>所以这个代码例子的闭包部分是<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a=<span class="number">10</span>; </div><div class="line"><span class="keyword">var</span> b=<span class="number">20</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span><span class="params">()</span></span>&#123;&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="JS垃圾回收机制"><a href="#JS垃圾回收机制" class="headerlink" title="JS垃圾回收机制"></a><strong>JS垃圾回收机制</strong></h3><p>这里为了让小伙伴们更好的理解闭包，我顺带把JS垃圾回收机制说一下，尽量用通俗简单的话语解释。<br>一句话定义：<br>JS垃圾回收机制规定：<strong>当你调用完一个函数后，他就不存在了</strong></p>
<p>举个栗子：<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">aaa</span><span class="params">()</span>  <span class="comment">&#123;</span></span></div><div class="line">                var a =1;</div><div class="line">                &#125;</div><div class="line"><span class="title">aaa</span><span class="params">()</span>;</div></pre></td></tr></table></figure></p>
<p>上面这段代码当函数aaa调用完【aaa();这句就是指函数调用】，那么变量a也就不存在了，它所占的内存就被JS垃圾回收机制给回收了。</p>
<p>那么怎样才能不能JS垃圾回收机制回收呢？也就是让变量a在内存中呆的时间久一点，别一执行完函数就消失了。</p>
<p>解决这个问题就是要运用闭包的特性。</p>
<h3 id="闭包的特点"><a href="#闭包的特点" class="headerlink" title="闭包的特点"></a><strong>闭包的特点</strong></h3><h4 id="函数嵌套函数"><a href="#函数嵌套函数" class="headerlink" title="函数嵌套函数"></a>函数嵌套函数</h4><p>内部函数可以引用外部函数的参数和变量,这样就会使参数和变量不会被垃圾回收机制所收回</p>
<p>举个栗子：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f3</span><span class="params">(a)</span></span>&#123;</div><div class="line">	            <span class="keyword">var</span> b=<span class="number">1</span>;</div><div class="line">				<span class="function"><span class="keyword">function</span> <span class="title">f4</span><span class="params">()</span></span>&#123;</div><div class="line">				    alert(a);</div><div class="line">					alert(b);</div><div class="line">			                 &#125;</div><div class="line">			  &#125;</div></pre></td></tr></table></figure></p>
<p>上面栗子可以看出，函数f4内部引用了外部函数f3的参数a和局部变量b<br>这样函数执行完以后，参数和变量都不会被垃圾回收机制回收。</p>
<p>下面再看一个栗子【首先说明，下面这个栗子很明显不是闭包】<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">aaa</span><span class="params">()</span><span class="comment">&#123;</span></span></div><div class="line">					var a =1;</div><div class="line">					a++;</div><div class="line">					console.log(a);</div><div class="line">			  &#125;</div><div class="line"><span class="title">aaa</span><span class="params">()</span>;</div><div class="line">aaa();</div></pre></td></tr></table></figure></p>
<p>上面代码的执行结果如图：</p>
<p><img src="/images/1.png" alt=""></p>
<p>调用两次的结果都是2，变量a并没进行累加，说明在调用第一次函数aaa后，变量a【值为2】已经销毁了，第二次调用后，变量a又会重新从1加到2进行输出。<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> b =<span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bbb</span><span class="params">()</span><span class="comment">&#123;</span></span></div><div class="line">				b++;</div><div class="line">				console.log(a);</div><div class="line">			  &#125;</div><div class="line"><span class="title">bbb</span><span class="params">()</span>;</div><div class="line">bbb();</div></pre></td></tr></table></figure></p>
<p>调用两次的结果:第一次是2，第二次是3，为什么呢，因为变量b是全局变量，是定义在全局作用域下的【简单点解释就是全局变量，做大的一个作用域】当函数bbb执行完后，虽然函数bbb里的东西销毁了，但是在全局作用域中，变量b还存在，就导致了变量b没有被销毁，继续存在，于是就会一直累加。从这里再次对比上一个栗子，变量a是局部变量，也没有在外部域存在，所以执行完函数aaa后，就会被销毁。</p>
<p>那么如何才能既让a是局部变量，又能让a累加呢？</p>
<p>这就是闭包最拿手的事情!!</p>
<p>栗子如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">aaa</span>(<span class="params"></span>) </span>&#123;</div><div class="line">					<span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line">					<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">						a++;</div><div class="line">						<span class="built_in">console</span>.log(a);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">var</span> c = aaa();</div><div class="line">				c();</div><div class="line">				c();</div><div class="line">				alert(a);</div></pre></td></tr></table></figure>
<p>执行完以后显示如图：<br><img src="/images/2.png" alt=""><br>第一次调用结果为2，第二次调用结果为3，成功实现了既让a是局部变量，又能让a累加的功能。同时你看到了上面，变量a未定义，对，你没有看错，我在全局作用域中了加了一句alert(a)，结果表明外部域是无法访问到内部域的变量a的。现在是不是有点慢慢通窍了，有种茅塞顿开的感觉了吧。</p>
<p>最后用一句话定义闭包：<br><strong>函数内在包含子函数，并最终return子函数。</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">     <span class="keyword">var</span> a=<span class="number">10</span>;</div><div class="line">     <span class="keyword">var</span> b=<span class="number">20</span>;</div><div class="line">     <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">          <span class="built_in">console</span>.log(a);</div><div class="line">     &#125;;</div><div class="line">     <span class="keyword">return</span> f2;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> result =f1();</div><div class="line">result();</div></pre></td></tr></table></figure>
<p><strong>闭包函数的最大价值在于：我们可以在函数(f2)的外部（即子函数也就是f2函数），直接读取该函数的局部变量。</strong></p>
<p>再深入研究，就会发现f1()函数就如同一个“类”，而其定义的局部变量就如同该“类”的全局变量；而子函数f2()函数，则如同这个“类”的方法，可以直接使用这个“类”的全局变量n</p>
<h3 id="闭包到底有什么用？"><a href="#闭包到底有什么用？" class="headerlink" title="闭包到底有什么用？"></a><strong>闭包到底有什么用？</strong></h3><p>1、<strong>缓存</strong>：显而易见，就是可以实现数据缓存，我们可以把一个需要长期用到的变量设为闭包函数的局部变量，在子函数里面直接使用它。因此局部变量只定义初始化一次，但我们可以多次调用子函数并使用该变量。<strong>这比起我们在子函数中定义初始化变量，多次调用则多次初始化的做法，效率更高。</strong>闭包函数常见的一种用途就是，我们可以通过此实现<strong>计数功能</strong>。在闭包函数定义一个计数变量，而在子函数中对其进行++的操作。这样每次调用闭包函数，计数变量就会加1。</p>
<p>2、<strong>实现封装</strong>：如前面所说，闭包函数就如同一个“类”，只有在该闭包函数里的方法才可以使用其局部变量，闭包函数之外的方法是不能读取其局部变量的。这就实现了面向对象的封装性，更安全更可靠。</p>
<p>闭包的知识我先说到这里，虽然有一些很重要的细节我没有说，比如，怎么改进这个闭包的书写形式来达到更好的模块化，其实是关于函数的知识，我不想在闭包上把很多细节都扯了，这篇文章对于你理解闭包已经没有问题了，毕竟在这个碎片化时间的世界里，一篇文章不能太长，这里其他的知识我先不说了，过几天我写一篇征服JS函数的文章，再结合这个把闭包彻底搞透。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;闭包的定义与含义&quot;&gt;&lt;a href=&quot;#闭包的定义与含义&quot; class=&quot;headerlink&quot; title=&quot;闭包的定义与含义&quot;&gt;&lt;/a&gt;闭包的定义与含义&lt;/h3&gt;&lt;p&gt; &lt;strong&gt;闭：是指闭包的内部环境对外部不可见。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;   闭包具有&lt;strong&gt;控制外部域的能力，也就是可以访问外部环境的执行域，&lt;/strong&gt;，同时又能&lt;strong&gt;防止外部域对闭包的反向控制，&lt;/strong&gt;也就是说，&lt;strong&gt;闭包的领域是对外封闭的。&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="博客" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>产品经理之消灭拖延</title>
    <link href="http://yoursite.com/2017/03/15/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E4%B9%8B%E6%B6%88%E7%81%AD%E6%8B%96%E5%BB%B6/"/>
    <id>http://yoursite.com/2017/03/15/产品经理之消灭拖延/</id>
    <published>2017-03-14T16:00:00.000Z</published>
    <updated>2017-06-17T07:45:56.961Z</updated>
    
    <content type="html"><![CDATA[<h2 id="推荐一篇文章，很不错"><a href="#推荐一篇文章，很不错" class="headerlink" title="推荐一篇文章，很不错"></a>推荐一篇文章，很不错</h2><p><a href="http://www.woshipm.com/zhichang/261080.html" target="_blank" rel="external">http://www.woshipm.com/zhichang/261080.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;推荐一篇文章，很不错&quot;&gt;&lt;a href=&quot;#推荐一篇文章，很不错&quot; class=&quot;headerlink&quot; title=&quot;推荐一篇文章，很不错&quot;&gt;&lt;/a&gt;推荐一篇文章，很不错&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.woshipm.com/zhicha
    
    </summary>
    
      <category term="产品经理" scheme="http://yoursite.com/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
    
      <category term="产品经理" scheme="http://yoursite.com/tags/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>运营人的矛与盾</title>
    <link href="http://yoursite.com/2017/03/10/%E8%BF%90%E8%90%A5/"/>
    <id>http://yoursite.com/2017/03/10/运营/</id>
    <published>2017-03-09T16:00:00.000Z</published>
    <updated>2017-06-15T13:16:42.880Z</updated>
    
    <content type="html"><![CDATA[<h3 id="为什么运营人即是矛又是盾"><a href="#为什么运营人即是矛又是盾" class="headerlink" title="为什么运营人即是矛又是盾"></a>为什么运营人即是矛又是盾</h3><p>往本质上看，运营人的存在是为了去最大化实现公司的业务价值，去为公司盈利，去让公司的产品更好的被更多的人知道和使用。</p>
<p>那么对于运营人自身的矛盾也就很好理解了。</p>
<p>比如举个很好的例子：<br><a id="more"></a></p>
<p>公司的考研培训部门让你去给该部门做运营，作为运营人，会去向广大大学生宣传当今每年毕业人数几百万，就业压力很大，如果去考研，既能提高自己的知识与学历，又能更容易的找到自己满意的工作。</p>
<p>然后获得非常好的效果后，你被该公司安排到就业培训部门救火，这时候作为运营人，你就要展示矛与盾的能力了，这时候，你就要开始向大学生宣传读个研还是要找工作，出来比起人家的三年工作经验，没有多大优势。这个例子就很好的体现出了运营人的矛盾，或者有种说法叫运营人的阴谋论，当然这不是贬低运营人，知识客观分析，这也展现了一个好的运营人所需要具有的能力。</p>
<h3 id="如何写一个好的文案："><a href="#如何写一个好的文案：" class="headerlink" title="如何写一个好的文案："></a>如何写一个好的文案：</h3><p>一个重要技巧：写失去的东西能够获得更高的关注度，这也是一个好的标题要多借鉴的方面</p>
<p>写作思路：一个好的标题，要多去想目标用户为什么要看这篇文章，看这篇文章的目的是什么，看这篇文章的用户的痛点是什么？</p>
<p>把这个目的和痛点结合写成标题，这样基本就是一个好的标题的文案。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;为什么运营人即是矛又是盾&quot;&gt;&lt;a href=&quot;#为什么运营人即是矛又是盾&quot; class=&quot;headerlink&quot; title=&quot;为什么运营人即是矛又是盾&quot;&gt;&lt;/a&gt;为什么运营人即是矛又是盾&lt;/h3&gt;&lt;p&gt;往本质上看，运营人的存在是为了去最大化实现公司的业务价值，去为公司盈利，去让公司的产品更好的被更多的人知道和使用。&lt;/p&gt;
&lt;p&gt;那么对于运营人自身的矛盾也就很好理解了。&lt;/p&gt;
&lt;p&gt;比如举个很好的例子：&lt;br&gt;
    
    </summary>
    
      <category term="运营" scheme="http://yoursite.com/categories/%E8%BF%90%E8%90%A5/"/>
    
    
      <category term="运营" scheme="http://yoursite.com/tags/%E8%BF%90%E8%90%A5/"/>
    
  </entry>
  
  <entry>
    <title>APP开发流程简要分析</title>
    <link href="http://yoursite.com/2016/11/24/APP%E5%BC%80%E5%8F%91%E6%AD%A5%E9%AA%A4/"/>
    <id>http://yoursite.com/2016/11/24/APP开发步骤/</id>
    <published>2016-11-24T02:23:15.000Z</published>
    <updated>2017-06-24T16:19:27.988Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h2><p>一个完整的软件开发，分为网页端和移动端(APP)</p>
<p>移动端又分为 Android 端和 IOS 端</p>
<p>使用的开发模式是移动应用开发常用的  MVC 模式 【Model + View + Controller】</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;开发流程&quot;&gt;&lt;a href=&quot;#开发流程&quot; class=&quot;headerlink&quot; title=&quot;开发流程&quot;&gt;&lt;/a&gt;开发流程&lt;/h2&gt;&lt;p&gt;一个完整的软件开发，分为网页端和移动端(APP)&lt;/p&gt;
&lt;p&gt;移动端又分为 Android 端和 IOS 端&lt;/p&gt;
&lt;p
    
    </summary>
    
      <category term="APP开发" scheme="http://yoursite.com/categories/APP%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="步骤" scheme="http://yoursite.com/tags/%E6%AD%A5%E9%AA%A4/"/>
    
  </entry>
  
  <entry>
    <title>如何写好一个竞品分析</title>
    <link href="http://yoursite.com/2016/10/10/%E5%A6%82%E4%BD%95%E5%86%99%E5%A5%BD%E4%B8%80%E4%B8%AA%E7%AB%9E%E5%93%81%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2016/10/10/如何写好一个竞品分析/</id>
    <published>2016-10-09T16:00:00.000Z</published>
    <updated>2017-06-16T04:06:12.659Z</updated>
    
    <content type="html"><![CDATA[<h3 id="产品概况"><a href="#产品概况" class="headerlink" title="产品概况"></a>产品概况</h3><h4 id="产品简介"><a href="#产品简介" class="headerlink" title="产品简介"></a>产品简介</h4><p>用一个表格就可以搞定</p>
<table>
<thead>
<tr>
<th>产品名称</th>
<th style="text-align:right">上线时间（web）</th>
<th style="text-align:center">当前版本</th>
<th>迭代版本</th>
<th>体验环境</th>
<th>slogan（标语）</th>
</tr>
</thead>
<tbody>
<tr>
<td>竞品A</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>竞品B</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>竞品C</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="下载量"><a href="#下载量" class="headerlink" title="下载量"></a>下载量</h4><p>同样一个表格<br><a id="more"></a></p>
<table>
<thead>
<tr>
<th>产品名称</th>
<th style="text-align:right">Android下载量</th>
<th style="text-align:center">IOS下载量</th>
<th>Android近7日日均下载</th>
<th>IOS近7日日均下载量 </th>
</tr>
</thead>
<tbody>
<tr>
<td>竞品A</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td></td>
<td></td>
</tr>
<tr>
<td>竞品B</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td></td>
<td></td>
</tr>
<tr>
<td>竞品C</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="需求图谱"><a href="#需求图谱" class="headerlink" title="需求图谱"></a>需求图谱</h4><h4 id="搜索指数概况和趋势"><a href="#搜索指数概况和趋势" class="headerlink" title="搜索指数概况和趋势"></a>搜索指数概况和趋势</h4><p>用表格把指数概况表示出来，再用一个表格把指数趋势表示出来。</p>
<hr>
<h3 id="市场分析"><a href="#市场分析" class="headerlink" title="市场分析"></a>市场分析</h3><h4 id="市场规模"><a href="#市场规模" class="headerlink" title="市场规模"></a>市场规模</h4><p>用表格，比如直方图配合折线图来显示特定时间段的用户规模以及增长率。</p>
<p>再将所得的规模数据与当前具有标准的规模进行比较，比如中国网名数量，移动端网名数量，来进行百分比对比。</p>
<h4 id="市场前景"><a href="#市场前景" class="headerlink" title="市场前景"></a>市场前景</h4><h3 id="用户分析"><a href="#用户分析" class="headerlink" title="用户分析"></a>用户分析</h3><h4 id="用户画像"><a href="#用户画像" class="headerlink" title="用户画像"></a>用户画像</h4><ol>
<li>年龄和性别信息</li>
<li>地域分布</li>
</ol>
<h4 id="核心用户和主流用户"><a href="#核心用户和主流用户" class="headerlink" title="核心用户和主流用户"></a>核心用户和主流用户</h4><p>核心用户：指对产品的发展做出贡献的忠实用户。   用户占比比较小，却很重要。</p>
<p>主流用户：是指消费产品内容和功能的用户。       用户占比非常大。</p>
<p>对每个竞品进行核心用户和主流用户分析。</p>
<hr>
<h3 id="功能分析"><a href="#功能分析" class="headerlink" title="功能分析"></a>功能分析</h3><h4 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h4><h4 id="核心功能对比"><a href="#核心功能对比" class="headerlink" title="核心功能对比"></a>核心功能对比</h4><h4 id="部分功能测试"><a href="#部分功能测试" class="headerlink" title="部分功能测试"></a>部分功能测试</h4><h4 id="关键功能流程"><a href="#关键功能流程" class="headerlink" title="关键功能流程"></a>关键功能流程</h4><p>把每个竞品的功能页面图截取出来放在一起–&gt;<strong>再用</strong>一个流程图去集中表示过程–&gt;<strong>然后</strong>对每个竞品的关键功能流程进行分析，一次列项表示出来–&gt;<strong>最后</strong>进行流程总述</p>
<p>提示：一般必须关注登录注册流程。</p>
<h4 id="创新功能"><a href="#创新功能" class="headerlink" title="创新功能"></a>创新功能</h4><p>列出每个竞品的创新功能，并加以分析评价。</p>
<h3 id="交互视觉设计"><a href="#交互视觉设计" class="headerlink" title="交互视觉设计"></a>交互视觉设计</h3><h4 id="交互设计"><a href="#交互设计" class="headerlink" title="交互设计"></a>交互设计</h4><p>分析每个竞品在交互设计上都有什么突出表现。具体突出表现是什么，依次对竞品进行分析。</p>
<h4 id="视觉设计"><a href="#视觉设计" class="headerlink" title="视觉设计"></a>视觉设计</h4><p>对每个竞品进行分析。<br>例如先对竞品A分析，在一个框架内，列出竞品A的主要页面设计截图。<br>最后对每个竞品的<strong>整体风格、排版设计、icon设计、竞品主图、字体字号</strong>进行总结。</p>
<hr>
<h3 id="运营分析"><a href="#运营分析" class="headerlink" title="运营分析"></a>运营分析</h3><h4 id="内容运营"><a href="#内容运营" class="headerlink" title="内容运营"></a>内容运营</h4><p>何为内容运营？<br>大致为如下解释：<br><strong>采集与创造</strong>——（内容的生产者来完成，可能是用户，也可能是产品本身）<br><strong>呈现与管理</strong>——（主要是产品本身来完成）<br><strong>扩散与传导</strong>——（由用户和产品本身共同完成，比如分享）<br><strong>效果与评估</strong>——（由用户和产品本身共同完成，比如用户点赞评论反馈，产品本身对内容的审核等）<br>对每个竞品进行内容运营分析<br>比如对竞品A进行分析：<br>在一个框架内列出三个区域，依次为：<br>内容生产者<br>产品本身<br>内容消费者</p>
<h4 id="用户运营"><a href="#用户运营" class="headerlink" title="用户运营"></a>用户运营</h4><p>何为用户运营？<br>“用户运营”对于一个产品来说尤为重要，它的主要内容包括：<br>拉新用户<br>维护老用户活跃度<br>建立用户流失预警机制<br>对已流失的用户进行挽回<br>促进用户付费</p>
<h4 id="活动运营"><a href="#活动运营" class="headerlink" title="活动运营"></a>活动运营</h4><h4 id="渠道运营"><a href="#渠道运营" class="headerlink" title="渠道运营"></a>渠道运营</h4><hr>
<h3 id="产品评价"><a href="#产品评价" class="headerlink" title="产品评价"></a>产品评价</h3><h4 id="应用商店评价"><a href="#应用商店评价" class="headerlink" title="应用商店评价"></a>应用商店评价</h4><p>比如安卓平均评分、IOS平均评分，安卓总评论人数，IOS总评论人数，然后对其进行分析总结</p>
<p>去应用商店评论去收集好评，和差评的具体内容，去挖掘产品问题然后去改进。</p>
<h4 id="百度、微博、知乎评价"><a href="#百度、微博、知乎评价" class="headerlink" title="百度、微博、知乎评价"></a>百度、微博、知乎评价</h4><p>分别进行评价汇总</p>
<p>最后关于竞品分析的几点个人思考</p>
<p>1：通过对网上各路大牛竞品分析的相关文章，案例的研究，总结了自己的一套竞品分析流程。<br>2：分析尽可能通俗易懂，不搞什么专业术语，好像逼格很高的样子，其实空洞乏味。<br>3：这个竞品分析模版主要是研究产品本身，大篇幅分析功能设计，然后按照产品运营的思路进行了运营分析。<br>4：真正项目的竞品分析，是有目的，有针对性的，不同的阶段竞品分析的意义也不同，所以不要盲目跟随别人的竞品分析模板。<br>5：这套竞品分析中的数据来源于“百度指数”和“ASO100”，为什么没有选大家习惯用的“易观千帆”，“艾瑞数据”，”TalkingData”或者是“baiduMOTA”这些看起来可能专业的数据分析平台，对比了一下这些平台上的数据，大方向差不多，但是数据相差甚远，比如产品用户的性别属性，差30%的都有。反正吧，最终衡量选择了“百度指数”，虽然不能准确反映APP的具体数据，但是或许可以反映APP的真是情况。<br>6：“竞品分析”是主观和客观的结合，所以你认为的可以是你认为的，你认为的不一定是你认为的，辩证看待。<br>7：竞品分析要注重分析方法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;产品概况&quot;&gt;&lt;a href=&quot;#产品概况&quot; class=&quot;headerlink&quot; title=&quot;产品概况&quot;&gt;&lt;/a&gt;产品概况&lt;/h3&gt;&lt;h4 id=&quot;产品简介&quot;&gt;&lt;a href=&quot;#产品简介&quot; class=&quot;headerlink&quot; title=&quot;产品简介&quot;&gt;&lt;/a&gt;产品简介&lt;/h4&gt;&lt;p&gt;用一个表格就可以搞定&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;产品名称&lt;/th&gt;
&lt;th style=&quot;text-align:right&quot;&gt;上线时间（web）&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;当前版本&lt;/th&gt;
&lt;th&gt;迭代版本&lt;/th&gt;
&lt;th&gt;体验环境&lt;/th&gt;
&lt;th&gt;slogan（标语）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;竞品A&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;竞品B&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;竞品C&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;下载量&quot;&gt;&lt;a href=&quot;#下载量&quot; class=&quot;headerlink&quot; title=&quot;下载量&quot;&gt;&lt;/a&gt;下载量&lt;/h4&gt;&lt;p&gt;同样一个表格&lt;br&gt;
    
    </summary>
    
      <category term="产品经理" scheme="http://yoursite.com/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
    
      <category term="竞品分析" scheme="http://yoursite.com/tags/%E7%AB%9E%E5%93%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>必须知道的产品经理专业术语</title>
    <link href="http://yoursite.com/2016/10/03/%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E4%B8%93%E4%B8%9A%E6%9C%AF%E8%AF%AD/"/>
    <id>http://yoursite.com/2016/10/03/必须知道的产品经理专业术语/</id>
    <published>2016-10-02T16:00:00.000Z</published>
    <updated>2017-06-16T02:27:27.301Z</updated>
    
    <content type="html"><![CDATA[<p>MRD：Market Requirements Document (市场需求文档)</p>
<p>PRD：Product Requirements Document (产品需求文档)</p>
<p><strong>注意：MRD和PRD互为因果，有了输入MRD才能有输出PRD</strong></p>
<p>KPI：Key Performance Indicator(关键绩效指标)</p>
<p>PV：page view(页面浏览量)</p>
<p>UV：unique visitor(独立IP)<br><a id="more"></a></p>
<p>FSD：Functional Specifications Document (功能详细说明文档)</p>
<p>C2C：Consumer to Consumer(顾客对顾客)</p>
<p>B2B：Business to Business(商家对商家)</p>
<p>O2O：Online to Offline(线上线下电子商务)</p>
<p>P2P：person to person</p>
<p>B2C：Business to Consumer(商家对个人)</p>
<p>UCD：User Centered Design(以用户为中心的设计)</p>
<p>SNS：Social Networking Services(社会性网络服务)</p>
<p>IM：Instant Messaging(即时通信)</p>
<p>JD：Job Descriptions(职位描述)</p>
<p>LBS：Location Based Service(基于位置的服务)</p>
<p>RSS：Really Simple Syndication(简易信息聚合)</p>
<hr>
<p>SDK：Software Development Kit(软件开发工具包)</p>
<p>DAU：Daily Active User(日活跃用户量)</p>
<p>OTA：Online Travel Agent(在线旅行社)</p>
<p>UX：User Experience Design(用户体验)</p>
<p>UI：User Interface(用户界面)</p>
<p>UGC：User Generated Content(用户生产内容)</p>
<p>CLI：Command-line Interface(命令行界面)</p>
<p>GUI：Graphical User Interface(图形用户界面)</p>
<p>NUI：Natural User Interface(自然用户界面)</p>
<hr>
<p>GM：General Manager (总经理)</p>
<p>VP：Vice President (副总裁)</p>
<p>AVP：Assistant Vice President (副总裁助理)</p>
<p>HRD：Human Resource Director (人力资源总监)</p>
<p>OD：Operations Director (运营总监)</p>
<p>MD：Marketing Director (市场总监)</p>
<p>OM：Operations Manager (运作经理)</p>
<p>PM：Production Manager(生产经理)、Product Manager(产品经理)、Project Manager(项目经理)</p>
<p>BM：Branch Manager(部门经理)</p>
<p>DM：District Manager(区域经理)</p>
<hr>
<p>URL：Uniform Resoure Locator(统一资源定位器)</p>
<p>UED：User Experience Design(用户体验设计师)</p>
<p>GMV：Gross Merchandise Volume(商品交易总量)</p>
<hr>
<p>SEO：Search Engine Optimization(搜索引擎优化)</p>
<p>SKU：Stock Keeping Unit(库存量单位)</p>
<p>SPU：Standard Product Unit (标准化产品单元)</p>
<p>ROI：Return On Investment(投资回报率)</p>
<p>C2C：Copy to China(借鉴国外成功产品模式)</p>
<p>ERP：Enterprise Resource Planning(企业资源计划)</p>
<p>POA：Primary Optical Area(第一视觉落点区)</p>
<hr>
<p><strong>MVP</strong><br>Minimum Viable Product，最小可行产品，即用最低的成本实现一个尽可能展示核心概念的产品，产品团队可以通过它收集到尽可能多的用户反馈和数据，从而评估这个产品能带来的效益。</p>
<p><strong>进入壁垒</strong></p>
<p>进入壁垒指的是进入某一市场的难度，这一高度取决于自身的技术、成本、对特定资源的占有情况，以及对手的发展程度。如果进入壁垒过高，比如想要做一个超越Google的搜索引擎，这件事在地球上没几个人能做到;如果进入壁垒过低，人人都可以做，那就意味着你的蓝海时段会很短，可能难以获得足够支撑长期发展的用户规模。</p>
<p><strong>商业价值</strong></p>
<p>商业模式指的是一款产品如何创造价值。侠义上来说，就是如何赚钱，广义上来讲，除了经济上的价值，还有社会价值和其他形式的价值。例如不少开源组织，尽管他们自身并不盈利，仅依靠一些基金会维持自身的运作，但其创造了大量的社会价值。虽然这其中并没有钱的味道，但这依然叫做“商业”价值。</p>
<p><strong>PDD</strong></p>
<p>PDD(Product Design Document)产品设计文档，是伴随产品整个生命周期的连接概念与执行的重要工具，它帮助产品团队与研发团队和高层领导达成共识，进而明确研发计划并指导研发过程。</p>
<p>PDD主要包含三类图纸：<br>网站结构图(Website Architecture Map)、网站蓝图(Wireframe或者Mockups)和网页描述表(Page Description Diagram)。</p>
<p>网站结构图通常会以思维导图的形式展现，用于描述整个网站的结构，确定网站的模块划分及网页个数。有的地方也称之为“站点地图”。在绘制网站结构图时，要注意MECE原则(Mutually Exclusive Collectively Exhaustive)，中文含义是“互相独立，完全穷尽”，即要求分类清晰，降低理解门槛，不重复，不缺漏。可以使用MindManager、Omnigraffle、XMind等来做。</p>
<p>网站蓝图，还有一个名字叫“交互设计图”。描述了一个网页中所需要包含的基础元素机器在这个页面中的布局，它会由图形界面设计师最终完善成美观的网页设计图。通常会使用Axure、Visio、Fireworks、Photoshop、Balsamiq Mockups等工具完成。小公司中通常由产品经理单独负责，大公司里会有专门的交互设计师来合作完成。</p>
<p>网页描述表是这三类图中最符合“文档”的概念的。因为它完全可以就是一份word文档。它包含了一个网页中所需展示的元素及其背后的逻辑，并不包含这些元素在页面中的布局(这在网站蓝图中有)。例如：域名、标题、Logo、模块名称及其描述、版权信息等。</p>
<p><strong>注意：</strong><br>PDD的目标用户，首先是产品团队，需要团队内部达成共识;然后是研发团队，用于确认可行性和研发成本;接下来会和研发部门给出的评估意见一起交给高层领导，确认项目周期，拍板资源;项目启动后，PDD回到研发团队指导具体的研发工作，同时进入测试团队，帮助制定测试计划。有时候，外部合作伙伴也会需要查看PDD，以便完成一些合作项目。这其中最重要的目标用户就是研发团队，因为他们是实现所有设计的核心力量，至于领导那边，还是用ppt和keynote去搞定最有效。</p>
<p><strong>提一下墨菲定律</strong></p>
<p>墨菲定律原本的意思是说：<strong>事情如果有变坏的可能，不管这种可能性有多小，它总会发生。</strong>简单的说就是“越怕出事，越会出事”。</p>
<p>放到互联网行业通常就是这样：</p>
<p>凡是输入框，都会遭遇灌水、SPAM、脚本注入。</p>
<p>凡是积分，都会被刷。</p>
<p>凡是推到网站首页的内容，都会出现色情、政治。</p>
<p>凡是用户间沟通的渠道，都会被广告机器人利用。</p>
<p>而对于项目管理而言，又可能是这样：</p>
<p>一项工作如果只有一个人负责，这个人肯定会休假或者离职。</p>
<p>认为没有技术难点的地方，都会成为技术难点或性能瓶颈。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MRD：Market Requirements Document (市场需求文档)&lt;/p&gt;
&lt;p&gt;PRD：Product Requirements Document (产品需求文档)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：MRD和PRD互为因果，有了输入MRD才能有输出PRD&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;KPI：Key Performance Indicator(关键绩效指标)&lt;/p&gt;
&lt;p&gt;PV：page view(页面浏览量)&lt;/p&gt;
&lt;p&gt;UV：unique visitor(独立IP)&lt;br&gt;
    
    </summary>
    
      <category term="产品经理" scheme="http://yoursite.com/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
    
      <category term="产品经理" scheme="http://yoursite.com/tags/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>产品经理的职业修养</title>
    <link href="http://yoursite.com/2016/09/15/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E7%9A%84%E8%81%8C%E4%B8%9A%E4%BF%AE%E5%85%BB/"/>
    <id>http://yoursite.com/2016/09/15/产品经理的职业修养/</id>
    <published>2016-09-14T16:00:00.000Z</published>
    <updated>2017-06-17T07:30:08.479Z</updated>
    
    <content type="html"><![CDATA[<p><strong>序：学道客，修养莫迟迟，光景斯须如梦里。</strong></p>
<h2 id="8句话"><a href="#8句话" class="headerlink" title="8句话"></a>8句话</h2><p>诚实。</p>
<p>有所长有所短。</p>
<p>对产品有信心并且做好了长期吃苦的思想准备。</p>
<p>能够在行进中不断开火，而不是纸上谈兵。<br><a id="more"></a></p>
<p>愿意倾听用户的意见和其他人善意的建议。</p>
<p>不推卸责任。</p>
<p>不会认为理论上可行就等于彻底搞定。</p>
<p>不会去浪费时间重新发明轮子。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;序：学道客，修养莫迟迟，光景斯须如梦里。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;8句话&quot;&gt;&lt;a href=&quot;#8句话&quot; class=&quot;headerlink&quot; title=&quot;8句话&quot;&gt;&lt;/a&gt;8句话&lt;/h2&gt;&lt;p&gt;诚实。&lt;/p&gt;
&lt;p&gt;有所长有所短。&lt;/p&gt;
&lt;p&gt;对产品有信心并且做好了长期吃苦的思想准备。&lt;/p&gt;
&lt;p&gt;能够在行进中不断开火，而不是纸上谈兵。&lt;br&gt;
    
    </summary>
    
      <category term="产品经理" scheme="http://yoursite.com/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
    
      <category term="产品经理" scheme="http://yoursite.com/tags/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>让创业团队拧成一股绳的不败法则</title>
    <link href="http://yoursite.com/2016/09/15/%E8%AE%A9%E5%88%9B%E4%B8%9A%E5%9B%A2%E9%98%9F%E6%8B%A7%E6%88%90%E4%B8%80%E8%82%A1%E7%BB%B3%E7%9A%84%E4%B8%8D%E8%B4%A5%E6%B3%95%E5%88%99/"/>
    <id>http://yoursite.com/2016/09/15/让创业团队拧成一股绳的不败法则/</id>
    <published>2016-09-14T16:00:00.000Z</published>
    <updated>2017-06-17T07:29:22.025Z</updated>
    
    <content type="html"><![CDATA[<p><strong>序：千人同心,则得千人之力;万人异心,则无一人之用。</strong></p>
<h2 id="团队生存法则"><a href="#团队生存法则" class="headerlink" title="团队生存法则"></a>团队生存法则</h2><p>记住：没有人能能够脱离团队的力量而独自生存，不论你有多强。</p>
<p>追求公平，不如崇尚公正。</p>
<p>不管什么事，都要做好最坏的打算。</p>
<a id="more"></a>
<p>什么样的人在团队中有较好的前景呢？经验丰富者；最年轻和富有活力者；最机智而年富力强者，这是自然的选择。</p>
<p>在一个团队中，喜欢说谎者必须离开。</p>
<p>懒惰的强者必须离开。</p>
<p>交流和沟通能力存在巨大问题的也得离开。</p>
<p>喜欢在团队中尔虞我诈的人必须离开，阴谋的爱好者，最后会死于阴谋。</p>
<p>必须谦虚而尊重同事，否则将被淘汰。</p>
<p>在激烈的团队竞争中，个人的生存只有两条路，支持和反对，如果你想走第三条路，一定会失败。</p>
<p>利用一切办法，让别人了解你，理解你。</p>
<p>做一个诚实的人，这一点永远不要改变。</p>
<h2 id="团队管理法则"><a href="#团队管理法则" class="headerlink" title="团队管理法则"></a>团队管理法则</h2><p>必须有明确的分工，这样团队中的成员才能知道自己该做什么，需要达到什么目标。</p>
<p>团队获得的利益一定要共享，必须确保每一个团队成员都能获得公正的利益。公正的分配方式是最有利的武器。</p>
<p>不管你有多么成功，切记，将功劳与荣耀归于团队的伙伴。</p>
<p>知人善用。</p>
<p>守承诺，讲信用，答应的事情一定要做到。</p>
<p>保持自信和乐观。</p>
<p>必须具备很高的交际能力，他可以与任何人就任何话题沟通，并总能说服对方，或者大度的被说服。</p>
<p>对待下属要有人情味。</p>
<h2 id="团队团结奥秘"><a href="#团队团结奥秘" class="headerlink" title="团队团结奥秘"></a>团队团结奥秘</h2><p>把同事当队友，而非你的对手。</p>
<p>心胸大点，不要去排挤同事。</p>
<p>你成就了团队，团队也会成就你。</p>
<h2 id="团队个人法则"><a href="#团队个人法则" class="headerlink" title="团队个人法则"></a>团队个人法则</h2><p>做决定时犹豫不决和在工作中依赖别人的人，难以晋升。</p>
<p>永远不要埋怨。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;序：千人同心,则得千人之力;万人异心,则无一人之用。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;团队生存法则&quot;&gt;&lt;a href=&quot;#团队生存法则&quot; class=&quot;headerlink&quot; title=&quot;团队生存法则&quot;&gt;&lt;/a&gt;团队生存法则&lt;/h2&gt;&lt;p&gt;记住：没有人能能够脱离团队的力量而独自生存，不论你有多强。&lt;/p&gt;
&lt;p&gt;追求公平，不如崇尚公正。&lt;/p&gt;
&lt;p&gt;不管什么事，都要做好最坏的打算。&lt;/p&gt;
    
    </summary>
    
      <category term="释放团队力量" scheme="http://yoursite.com/categories/%E9%87%8A%E6%94%BE%E5%9B%A2%E9%98%9F%E5%8A%9B%E9%87%8F/"/>
    
    
      <category term="产品经理" scheme="http://yoursite.com/tags/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>git知识总结</title>
    <link href="http://yoursite.com/2016/08/10/git%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2016/08/10/git知识总结/</id>
    <published>2016-08-09T16:00:00.000Z</published>
    <updated>2017-06-16T01:05:53.240Z</updated>
    
    <content type="html"><![CDATA[<h3 id="遇到的所有问题："><a href="#遇到的所有问题：" class="headerlink" title="遇到的所有问题："></a><strong>遇到的所有问题：</strong></h3><p><strong>1：</strong><br>warning: LF will be replaced by CRLF in XXXXXXXXXXXXXX.<br>解决 git config core.autocrlf false</p>
<p><strong>2：</strong><br>github push 提交代码时停止在writing objects怎么办？<br>git config –global http.postBuffer 524288000</p>
<p><strong>3：</strong><br>新建仓库初始化时，不要点击初始化按钮，<br>否则github就自动建立一个git仓库，并且生成一个版本库<br><a id="more"></a><br>所以这样的话，那你用git push origin master就会说被拒绝<br>这种情况<br><strong>要先git pull origin master</strong><br><strong>再git push origin master</strong></p>
<h3 id="一开始怎么绑定github账号"><a href="#一开始怎么绑定github账号" class="headerlink" title="一开始怎么绑定github账号"></a>一开始怎么绑定github账号</h3><p><strong>设置全局用户名和email，作为每次提交的记录</strong><br>git config –global user.name “name”<br>git config –global user.email “mail.com”  </p>
<h3 id="添加一个仓库"><a href="#添加一个仓库" class="headerlink" title="添加一个仓库"></a><strong>添加一个仓库</strong></h3><p>git remote add origin git@….git<br>git push -u origin master  </p>
<h3 id="当提示权限不够时，添加ssh公钥"><a href="#当提示权限不够时，添加ssh公钥" class="headerlink" title="当提示权限不够时，添加ssh公钥"></a>当提示权限不够时，添加ssh公钥</h3><h3 id="在用户的-ssh目录下找id-rsa-pub等文件，没有的话去生成"><a href="#在用户的-ssh目录下找id-rsa-pub等文件，没有的话去生成" class="headerlink" title="在用户的.ssh目录下找id_rsa.pub等文件，没有的话去生成"></a>在用户的.ssh目录下找id_rsa.pub等文件，没有的话去生成</h3><p>ssh-keygen -t rsa -C “youremail@example.com”  </p>
<h3 id="设置pull的默认地址"><a href="#设置pull的默认地址" class="headerlink" title="设置pull的默认地址"></a>设置pull的默认地址</h3><p>git branch –set-upstream-to=origin/master  </p>
<h3 id="设置push的默认地址"><a href="#设置push的默认地址" class="headerlink" title="设置push的默认地址"></a>设置push的默认地址</h3><p>git remote add origin git@….git  </p>
<h3 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h3><p>git config –global alias.xx ‘’  </p>
<h3 id="临时保存工作区"><a href="#临时保存工作区" class="headerlink" title="临时保存工作区"></a>临时保存工作区</h3><p>git stash<br>git stash pop  </p>
<h3 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h3><p>git reset —hard 版本号  </p>
<h3 id="强行回滚远程服务器"><a href="#强行回滚远程服务器" class="headerlink" title="强行回滚远程服务器"></a>强行回滚远程服务器</h3><p>git push -f  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;遇到的所有问题：&quot;&gt;&lt;a href=&quot;#遇到的所有问题：&quot; class=&quot;headerlink&quot; title=&quot;遇到的所有问题：&quot;&gt;&lt;/a&gt;&lt;strong&gt;遇到的所有问题：&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1：&lt;/strong&gt;&lt;br&gt;warning: LF will be replaced by CRLF in XXXXXXXXXXXXXX.&lt;br&gt;解决 git config core.autocrlf false&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2：&lt;/strong&gt;&lt;br&gt;github push 提交代码时停止在writing objects怎么办？&lt;br&gt;git config –global http.postBuffer 524288000&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3：&lt;/strong&gt;&lt;br&gt;新建仓库初始化时，不要点击初始化按钮，&lt;br&gt;否则github就自动建立一个git仓库，并且生成一个版本库&lt;br&gt;
    
    </summary>
    
      <category term="工具能力" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7%E8%83%BD%E5%8A%9B/"/>
    
    
      <category term="GIT" scheme="http://yoursite.com/tags/GIT/"/>
    
  </entry>
  
  <entry>
    <title>你的团队需要一个会讲故事的人</title>
    <link href="http://yoursite.com/2016/06/10/%E7%94%A8%E6%95%85%E4%BA%8B%E6%80%9D%E7%BB%B4%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2016/06/10/用故事思维解决问题/</id>
    <published>2016-06-09T16:00:00.000Z</published>
    <updated>2017-06-15T16:42:32.935Z</updated>
    
    <content type="html"><![CDATA[<p><strong>每看完一本书都有一种技能升级的体会，于是迫不及待的记录下人生中那种获得升华的体会。</strong></p>
<h4 id="何为故事"><a href="#何为故事" class="headerlink" title="何为故事"></a>何为故事</h4><p><strong>互动能够让人找到发自内心的、来源于实践的意义，让讲故事的人和听故事的人都得到满足，这才是故事。</strong>那些下意识就把故事定义为一个有开头、过程和结尾的人一定还没有理解到故事的本质。</p>
<h4 id="重温回忆，留心自己所讲的故事"><a href="#重温回忆，留心自己所讲的故事" class="headerlink" title="重温回忆，留心自己所讲的故事"></a>重温回忆，留心自己所讲的故事</h4><p>可以通过改变你的故事来改变现实感受。<br>  <a id="more"></a></p>
<h4 id="好的故事配方"><a href="#好的故事配方" class="headerlink" title="好的故事配方"></a>好的故事配方</h4><p>一般好故事由三部分组成，旧规矩、中间的波折，新规矩。</p>
<h4 id="一点建议"><a href="#一点建议" class="headerlink" title="一点建议"></a>一点建议</h4><p>试图通过逻辑来控制人们的看法会让对方戒备心增强，会驱使对方离你越来越远。让故事变得更加有人情味。</p>
<h4 id="团队"><a href="#团队" class="headerlink" title="团队"></a>团队</h4><p>团队真正的信任来源于诚实。</p>
<h4 id="慈善和团结"><a href="#慈善和团结" class="headerlink" title="慈善和团结"></a>慈善和团结</h4><p>慈善是纵向的，来源于由上到下的评判。团结是水平的，有利于平等交流。一个团队要多团结，不要多慈善。</p>
<h4 id="学会从不同视角读你的故事"><a href="#学会从不同视角读你的故事" class="headerlink" title="学会从不同视角读你的故事"></a>学会从不同视角读你的故事</h4><p>花时间从不同视角审视重要的故事，就能尽可能避免挫伤他人的感情，避免人们浪费时间去生气。</p>
<h4 id="领导如何讲故事"><a href="#领导如何讲故事" class="headerlink" title="领导如何讲故事"></a>领导如何讲故事</h4><p>不要把主人公的自我意识加到故事中，那样的话对听众来说，这故事只是属于你的故事，毫无感染力。要控制自我意识。</p>
<h4 id="“我是谁”的故事"><a href="#“我是谁”的故事" class="headerlink" title="“我是谁”的故事"></a>“我是谁”的故事</h4><p>讲故事之前要弄明白这些问题：<br>你是谁？<br>你的特别之处是什么？<br>为何你可以影响他人？<br>人人都有天赋，你的天赋是哪些？<br>你是富有同情，是值得信赖，是诚实，还是圆滑老练？<br>你的什么本领让你有了影响他人的权利？</p>
<h4 id="学会倾听"><a href="#学会倾听" class="headerlink" title="学会倾听"></a>学会倾听</h4><p>无论对方和你的观点多么不可调和，也要深入理解对方的观点，暂时放下自己的观点，这样的倾听才能让你赢得讲诉自己故事的机会。<strong>津津有味地倾听，抱着可能会学到重要知识的期待去倾听。</strong></p>
<h4 id="领导如何讲故事-1"><a href="#领导如何讲故事-1" class="headerlink" title="领导如何讲故事"></a>领导如何讲故事</h4><p>不要把主人公的自我意识加到故事中，那样的话对听众来说，这故事只是属于你的故事，毫无感染力。要控制自我意识。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;每看完一本书都有一种技能升级的体会，于是迫不及待的记录下人生中那种获得升华的体会。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;何为故事&quot;&gt;&lt;a href=&quot;#何为故事&quot; class=&quot;headerlink&quot; title=&quot;何为故事&quot;&gt;&lt;/a&gt;何为故事&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;互动能够让人找到发自内心的、来源于实践的意义，让讲故事的人和听故事的人都得到满足，这才是故事。&lt;/strong&gt;那些下意识就把故事定义为一个有开头、过程和结尾的人一定还没有理解到故事的本质。&lt;/p&gt;
&lt;h4 id=&quot;重温回忆，留心自己所讲的故事&quot;&gt;&lt;a href=&quot;#重温回忆，留心自己所讲的故事&quot; class=&quot;headerlink&quot; title=&quot;重温回忆，留心自己所讲的故事&quot;&gt;&lt;/a&gt;重温回忆，留心自己所讲的故事&lt;/h4&gt;&lt;p&gt;可以通过改变你的故事来改变现实感受。&lt;br&gt;
    
    </summary>
    
      <category term="能力提升" scheme="http://yoursite.com/categories/%E8%83%BD%E5%8A%9B%E6%8F%90%E5%8D%87/"/>
    
    
      <category term="团队" scheme="http://yoursite.com/tags/%E5%9B%A2%E9%98%9F/"/>
    
  </entry>
  
  <entry>
    <title>产品经理的最佳实践</title>
    <link href="http://yoursite.com/2016/05/11/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/2016/05/11/产品经理的最佳实践/</id>
    <published>2016-05-10T16:00:00.000Z</published>
    <updated>2017-06-15T04:46:25.336Z</updated>
    
    <content type="html"><![CDATA[<h4 id="产品经理的职责"><a href="#产品经理的职责" class="headerlink" title="产品经理的职责"></a>产品经理的职责</h4><p> 许多产品经理将大把的时间浪费在与产品无关的工作上，比如，营销管理和项目管理，这些都不是产品经理应该干的活</p>
<h4 id="用户体验"><a href="#用户体验" class="headerlink" title="用户体验"></a>用户体验</h4><p> 对于大多数软件产品来说，用户体验就是产品的生命。产品经理应该与交互设计师、开发人员密切合作，设计良好的用户体验，打造实用价值的产品。<br>  <a id="more"></a></p>
<h4 id="机会评估"><a href="#机会评估" class="headerlink" title="机会评估"></a>机会评估</h4><p> 用方便快捷的机会评估方法取代过时的市场需求文档。动手设计产品前，先明确产品需要解决什么问题，为谁解决问题，以及评估产品的标准。</p>
<h4 id="特约用户"><a href="#特约用户" class="headerlink" title="特约用户"></a>特约用户</h4><p> 打造优秀的产品没有任何捷径，只能请用户反复试用产品，不断改进。</p>
<h4 id="产品原则"><a href="#产品原则" class="headerlink" title="产品原则"></a>产品原则</h4><p> 产品管理工作的主要内容是制定决策。明确的产品原则则可以帮助产品经理和产品团队树立清晰的价值标准，做出果断的依据。</p>
<h4 id="探索【定义】产品"><a href="#探索【定义】产品" class="headerlink" title="探索【定义】产品"></a>探索【定义】产品</h4><p> 产品经理的主要职责是探索（定义）有价值的、可用的、可行的产品。除非产品经理确定这三点，否则同事的努力都将付之东流。</p>
<h4 id="使用原型"><a href="#使用原型" class="headerlink" title="使用原型"></a>使用原型</h4><p> 使用高保真原型是探索产品的关键步骤。原因如下：第一，迫使产品经理深入定义解决方案；第二，可以让真实的用户参与测试、验证产品创意；第三，可以直观地向团队展示产品的设计和思路。</p>
<h4 id="用户参与原型测试"><a href="#用户参与原型测试" class="headerlink" title="用户参与原型测试"></a>用户参与原型测试</h4><p> 有了产品原型，产品经理可以方便地请用户验证产品创意。原型测试是所有产品经理和产品设计师都必须掌握的工作技能。获取有效的用户反馈是产品经理最重要的工作。</p>
<h4 id="根据数据改进产品"><a href="#根据数据改进产品" class="headerlink" title="根据数据改进产品"></a>根据数据改进产品</h4><p> 成功的产品经理懂得利用数据来改进现有产品。改进产品不是根据客户要求一味增加新功能，而是根据产品的实际应用情况，不断地提升产品的各项指标，逐步完善产品。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;产品经理的职责&quot;&gt;&lt;a href=&quot;#产品经理的职责&quot; class=&quot;headerlink&quot; title=&quot;产品经理的职责&quot;&gt;&lt;/a&gt;产品经理的职责&lt;/h4&gt;&lt;p&gt; 许多产品经理将大把的时间浪费在与产品无关的工作上，比如，营销管理和项目管理，这些都不是产品经理应该干的活&lt;/p&gt;
&lt;h4 id=&quot;用户体验&quot;&gt;&lt;a href=&quot;#用户体验&quot; class=&quot;headerlink&quot; title=&quot;用户体验&quot;&gt;&lt;/a&gt;用户体验&lt;/h4&gt;&lt;p&gt; 对于大多数软件产品来说，用户体验就是产品的生命。产品经理应该与交互设计师、开发人员密切合作，设计良好的用户体验，打造实用价值的产品。&lt;br&gt;
    
    </summary>
    
      <category term="产品经理" scheme="http://yoursite.com/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
    
      <category term="产品经理" scheme="http://yoursite.com/tags/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>产品经理的反省清单</title>
    <link href="http://yoursite.com/2016/05/10/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E7%9A%84%E5%8F%8D%E7%9C%81%E6%B8%85%E5%8D%95/"/>
    <id>http://yoursite.com/2016/05/10/产品经理的反省清单/</id>
    <published>2016-05-09T16:00:00.000Z</published>
    <updated>2017-06-15T03:52:18.033Z</updated>
    
    <content type="html"><![CDATA[<h3 id="不为失败找借口，只为成功找方法"><a href="#不为失败找借口，只为成功找方法" class="headerlink" title="不为失败找借口，只为成功找方法"></a><strong>不为失败找借口，只为成功找方法</strong></h3><ol>
<li><p>产品能吸引目标消费者的关注吗？</p>
</li>
<li><p>产品的设计是否人性化，易于操作？</p>
</li>
<li><p>产品能在竞争中取胜吗？即使是面对未来风云变化的市场，依旧有取胜的把握吗？</p>
<a id="more"></a>
</li>
<li><p>我了解目标用户吗？产品（不是理想的产品，而是实际开发出来的产品）是否能得到他们的认可？</p>
</li>
<li><p>产品是否有别与市面上的其他产品？我能在两分钟内想公司高管清除地阐明这些差别吗？能在一分钟内向客户解释清除吗？能在半分钟内向经验丰富的行业分析师解释清除吗？</p>
</li>
<li><p>产品能正常运行吗？</p>
</li>
<li><p>产品是否完整？用户对产品的印象如何？销售业绩如何？销售任务能否顺利完成？</p>
</li>
<li><p>产品的特色 是否与目标用户的需求一致？产品特色是否鲜明？</p>
</li>
<li><p>产品值钱吗？值多少钱？为什么值这么多钱？用户会选择更便宜的产品吗？</p>
</li>
<li><p>我了解其他团队成员对产品的看法吗？他们觉得产品好在哪里？他们的看法是否与我的观点一致</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;不为失败找借口，只为成功找方法&quot;&gt;&lt;a href=&quot;#不为失败找借口，只为成功找方法&quot; class=&quot;headerlink&quot; title=&quot;不为失败找借口，只为成功找方法&quot;&gt;&lt;/a&gt;&lt;strong&gt;不为失败找借口，只为成功找方法&lt;/strong&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;产品能吸引目标消费者的关注吗？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;产品的设计是否人性化，易于操作？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;产品能在竞争中取胜吗？即使是面对未来风云变化的市场，依旧有取胜的把握吗？&lt;/p&gt;
    
    </summary>
    
      <category term="产品经理" scheme="http://yoursite.com/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
    
      <category term="产品经理" scheme="http://yoursite.com/tags/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
  </entry>
  
</feed>
