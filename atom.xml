<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>godkun的博客</title>
  <subtitle>记录学习的技能和遇到的问题</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-06-12T08:59:09.488Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>杨昆</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>彻底征服闭包定义、特点、价值、用法</title>
    <link href="http://yoursite.com/2017/04/10/2017-04-10-%E5%BD%BB%E5%BA%95%E5%BE%81%E6%9C%8D%E9%97%AD%E5%8C%85%20-%20%E5%89%AF%E6%9C%AC/"/>
    <id>http://yoursite.com/2017/04/10/2017-04-10-彻底征服闭包 - 副本/</id>
    <published>2017-04-09T16:00:00.000Z</published>
    <updated>2017-06-12T08:59:09.488Z</updated>
    
    <content type="html"><![CDATA[<h3 id="闭包的定义与含义"><a href="#闭包的定义与含义" class="headerlink" title="闭包的定义与含义"></a>闭包的定义与含义</h3><p> <strong>闭：是指闭包的内部环境对外部不可见。</strong></p>
<p>   闭包具有<strong>控制外部域的能力，也就是可以访问外部环境的执行域，</strong>，同时又能<strong>防止外部域对闭包的反向控制，</strong>也就是说，<strong>闭包的领域是对外封闭的。</strong><br><a id="more"></a></p>
<h3 id="闭包的实现方法"><a href="#闭包的实现方法" class="headerlink" title="闭包的实现方法"></a><strong>闭包的实现方法</strong></h3><p> <strong>JS闭包是通过function实现的</strong></p>
<h3 id="闭包的特权"><a href="#闭包的特权" class="headerlink" title="闭包的特权"></a><strong>闭包的特权</strong></h3><p> <strong>闭包内声明的变量，闭包外的任何环境都无法访问。</strong><br>举个栗子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">     <span class="keyword">var</span> a=<span class="number">10</span>;</div><div class="line">     <span class="keyword">var</span> b=<span class="number">20</span>;</div><div class="line">     <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;      </div><div class="line">          <span class="built_in">console</span>.log(a);         </div><div class="line">     &#125;;</div><div class="line">     <span class="keyword">return</span> f2;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> result =f1();</div><div class="line">result();</div></pre></td></tr></table></figure></p>
<p>这里的闭包是f1函数，不懂没关系，下面我会运用这个例子上面写的知识来去解释为什么f1是闭包。</p>
<p>在上面的代码中，函数f2就被包括在函数f1内部，这时f1内部的所有局部变量，对f2都是可见的，但是反过来就不行，f2内部的局部变量对f1就是不可见的。<br>既然<strong>f2可以读取f1中的局部变量，那么只要把f2作为返回值，我们就可以在f1外部读取它的内部变量！</strong><br><strong>这种函数叫称之为闭包函数。</strong><br>所以，这个困扰初学者到底哪个是闭包的问题也就解决了，顺着这个思路你就会发现变量a和变量b也是闭包的一部分，因为他们对外不可见。<br>所以这个代码例子的闭包部分是<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a=<span class="number">10</span>; </div><div class="line"><span class="keyword">var</span> b=<span class="number">20</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span><span class="params">()</span></span>&#123;&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="JS垃圾回收机制"><a href="#JS垃圾回收机制" class="headerlink" title="JS垃圾回收机制"></a><strong>JS垃圾回收机制</strong></h3><p>这里为了让小伙伴们更好的理解闭包，我顺带把JS垃圾回收机制说一下，尽量用通俗简单的话语解释。<br>一句话定义：<br>JS垃圾回收机制规定：<strong>当你调用完一个函数后，他就不存在了</strong></p>
<p>举个栗子：<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">aaa</span><span class="params">()</span>  <span class="comment">&#123;</span></span></div><div class="line">                var a =1;</div><div class="line">                &#125;</div><div class="line"><span class="title">aaa</span><span class="params">()</span>;</div></pre></td></tr></table></figure></p>
<p>上面这段代码当函数aaa调用完【aaa();这句就是指函数调用】，那么变量a也就不存在了，它所占的内存就被JS垃圾回收机制给回收了。</p>
<p>那么怎样才能不能JS垃圾回收机制回收呢？也就是让变量a在内存中呆的时间久一点，别一执行完函数就消失了。</p>
<p>解决这个问题就是要运用闭包的特性。</p>
<h3 id="闭包的特点"><a href="#闭包的特点" class="headerlink" title="闭包的特点"></a><strong>闭包的特点</strong></h3><h4 id="函数嵌套函数"><a href="#函数嵌套函数" class="headerlink" title="函数嵌套函数"></a>函数嵌套函数</h4><p>内部函数可以引用外部函数的参数和变量,这样就会使参数和变量不会被垃圾回收机制所收回</p>
<p>举个栗子：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f3</span><span class="params">(a)</span></span>&#123;</div><div class="line">	            <span class="keyword">var</span> b=<span class="number">1</span>;</div><div class="line">				<span class="function"><span class="keyword">function</span> <span class="title">f4</span><span class="params">()</span></span>&#123;</div><div class="line">				    alert(a);</div><div class="line">					alert(b);</div><div class="line">			                 &#125;</div><div class="line">			  &#125;</div></pre></td></tr></table></figure></p>
<p>上面栗子可以看出，函数f4内部引用了外部函数f3的参数a和局部变量b<br>这样函数执行完以后，参数和变量都不会被垃圾回收机制回收。</p>
<p>下面再看一个栗子【首先说明，下面这个栗子很明显不是闭包】<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">aaa</span><span class="params">()</span><span class="comment">&#123;</span></span></div><div class="line">					var a =1;</div><div class="line">					a++;</div><div class="line">					console.log(a);</div><div class="line">			  &#125;</div><div class="line"><span class="title">aaa</span><span class="params">()</span>;</div><div class="line">aaa();</div></pre></td></tr></table></figure></p>
<p>上面代码的执行结果如图：</p>
<p><img src="/images/1.png" alt=""></p>
<p>调用两次的结果都是2，变量a并没进行累加，说明在调用第一次函数aaa后，变量a【值为2】已经销毁了，第二次调用后，变量a又会重新从1加到2进行输出。<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> b =<span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bbb</span><span class="params">()</span><span class="comment">&#123;</span></span></div><div class="line">				b++;</div><div class="line">				console.log(a);</div><div class="line">			  &#125;</div><div class="line"><span class="title">bbb</span><span class="params">()</span>;</div><div class="line">bbb();</div></pre></td></tr></table></figure></p>
<p>调用两次的结果:第一次是2，第二次是3，为什么呢，因为变量b是全局变量，是定义在全局作用域下的【简单点解释就是全局变量，做大的一个作用域】当函数bbb执行完后，虽然函数bbb里的东西销毁了，但是在全局作用域中，变量b还存在，就导致了变量b没有被销毁，继续存在，于是就会一直累加。从这里再次对比上一个栗子，变量a是局部变量，也没有在外部域存在，所以执行完函数aaa后，就会被销毁。</p>
<p>那么如何才能既让a是局部变量，又能让a累加呢？</p>
<p>这就是闭包最拿手的事情!!</p>
<p>栗子如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">aaa</span>(<span class="params"></span>) </span>&#123;</div><div class="line">					<span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line">					<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">						a++;</div><div class="line">						<span class="built_in">console</span>.log(a);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">var</span> c = aaa();</div><div class="line">				c();</div><div class="line">				c();</div><div class="line">				alert(a);</div></pre></td></tr></table></figure>
<p>执行完以后显示如图：<br><img src="/images/2.png" alt=""><br>第一次调用结果为2，第二次调用结果为3，成功实现了既让a是局部变量，又能让a累加的功能。同时你看到了上面，变量a未定义，对，你没有看错，我在全局作用域中了加了一句alert(a)，结果表明外部域是无法访问到内部域的变量a的。现在是不是有点慢慢通窍了，有种茅塞顿开的感觉了吧。</p>
<p>最后用一句话定义闭包：<br><strong>函数内在包含子函数，并最终return子函数。</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">     <span class="keyword">var</span> a=<span class="number">10</span>;</div><div class="line">     <span class="keyword">var</span> b=<span class="number">20</span>;</div><div class="line">     <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">          <span class="built_in">console</span>.log(a);</div><div class="line">     &#125;;</div><div class="line">     <span class="keyword">return</span> f2;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> result =f1();</div><div class="line">result();</div></pre></td></tr></table></figure>
<p><strong>闭包函数的最大价值在于：我们可以在函数(f2)的外部（即子函数也就是f2函数），直接读取该函数的局部变量。</strong></p>
<p>再深入研究，就会发现f1()函数就如同一个“类”，而其定义的局部变量就如同该“类”的全局变量；而子函数f2()函数，则如同这个“类”的方法，可以直接使用这个“类”的全局变量n</p>
<h3 id="闭包到底有什么用？"><a href="#闭包到底有什么用？" class="headerlink" title="闭包到底有什么用？"></a><strong>闭包到底有什么用？</strong></h3><p>1、<strong>缓存</strong>：显而易见，就是可以实现数据缓存，我们可以把一个需要长期用到的变量设为闭包函数的局部变量，在子函数里面直接使用它。因此局部变量只定义初始化一次，但我们可以多次调用子函数并使用该变量。<strong>这比起我们在子函数中定义初始化变量，多次调用则多次初始化的做法，效率更高。</strong>闭包函数常见的一种用途就是，我们可以通过此实现<strong>计数功能</strong>。在闭包函数定义一个计数变量，而在子函数中对其进行++的操作。这样每次调用闭包函数，计数变量就会加1。</p>
<p>2、<strong>实现封装</strong>：如前面所说，闭包函数就如同一个“类”，只有在该闭包函数里的方法才可以使用其局部变量，闭包函数之外的方法是不能读取其局部变量的。这就实现了面向对象的封装性，更安全更可靠。</p>
<p>闭包的知识我先说到这里，虽然有一些很重要的细节我没有说，比如，怎么改进这个闭包的书写形式来达到更好的模块化，其实是关于函数的知识，我不想在闭包上把很多细节都扯了，这篇文章对于你理解闭包已经没有问题了，毕竟在这个碎片化时间的世界里，一篇文章不能太长，这里其他的知识我先不说了，过几天我写一篇征服JS函数的文章，再结合这个把闭包彻底搞透。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;闭包的定义与含义&quot;&gt;&lt;a href=&quot;#闭包的定义与含义&quot; class=&quot;headerlink&quot; title=&quot;闭包的定义与含义&quot;&gt;&lt;/a&gt;闭包的定义与含义&lt;/h3&gt;&lt;p&gt; &lt;strong&gt;闭：是指闭包的内部环境对外部不可见。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;   闭包具有&lt;strong&gt;控制外部域的能力，也就是可以访问外部环境的执行域，&lt;/strong&gt;，同时又能&lt;strong&gt;防止外部域对闭包的反向控制，&lt;/strong&gt;也就是说，&lt;strong&gt;闭包的领域是对外封闭的。&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="博客" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>运营人的矛与盾</title>
    <link href="http://yoursite.com/2017/03/10/%E8%BF%90%E8%90%A5/"/>
    <id>http://yoursite.com/2017/03/10/运营/</id>
    <published>2017-03-09T16:00:00.000Z</published>
    <updated>2017-06-15T13:16:42.880Z</updated>
    
    <content type="html"><![CDATA[<h3 id="为什么运营人即是矛又是盾"><a href="#为什么运营人即是矛又是盾" class="headerlink" title="为什么运营人即是矛又是盾"></a>为什么运营人即是矛又是盾</h3><p>往本质上看，运营人的存在是为了去最大化实现公司的业务价值，去为公司盈利，去让公司的产品更好的被更多的人知道和使用。</p>
<p>那么对于运营人自身的矛盾也就很好理解了。</p>
<p>比如举个很好的例子：<br><a id="more"></a></p>
<p>公司的考研培训部门让你去给该部门做运营，作为运营人，会去向广大大学生宣传当今每年毕业人数几百万，就业压力很大，如果去考研，既能提高自己的知识与学历，又能更容易的找到自己满意的工作。</p>
<p>然后获得非常好的效果后，你被该公司安排到就业培训部门救火，这时候作为运营人，你就要展示矛与盾的能力了，这时候，你就要开始向大学生宣传读个研还是要找工作，出来比起人家的三年工作经验，没有多大优势。这个例子就很好的体现出了运营人的矛盾，或者有种说法叫运营人的阴谋论，当然这不是贬低运营人，知识客观分析，这也展现了一个好的运营人所需要具有的能力。</p>
<h3 id="如何写一个好的文案："><a href="#如何写一个好的文案：" class="headerlink" title="如何写一个好的文案："></a>如何写一个好的文案：</h3><p>一个重要技巧：写失去的东西能够获得更高的关注度，这也是一个好的标题要多借鉴的方面</p>
<p>写作思路：一个好的标题，要多去想目标用户为什么要看这篇文章，看这篇文章的目的是什么，看这篇文章的用户的痛点是什么？</p>
<p>把这个目的和痛点结合写成标题，这样基本就是一个好的标题的文案。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;为什么运营人即是矛又是盾&quot;&gt;&lt;a href=&quot;#为什么运营人即是矛又是盾&quot; class=&quot;headerlink&quot; title=&quot;为什么运营人即是矛又是盾&quot;&gt;&lt;/a&gt;为什么运营人即是矛又是盾&lt;/h3&gt;&lt;p&gt;往本质上看，运营人的存在是为了去最大化实现公司的业务价值，去为公司盈利，去让公司的产品更好的被更多的人知道和使用。&lt;/p&gt;
&lt;p&gt;那么对于运营人自身的矛盾也就很好理解了。&lt;/p&gt;
&lt;p&gt;比如举个很好的例子：&lt;br&gt;
    
    </summary>
    
      <category term="运营" scheme="http://yoursite.com/categories/%E8%BF%90%E8%90%A5/"/>
    
    
      <category term="运营" scheme="http://yoursite.com/tags/%E8%BF%90%E8%90%A5/"/>
    
  </entry>
  
  <entry>
    <title>你的团队需要一个会讲故事的人</title>
    <link href="http://yoursite.com/2016/06/10/%E7%94%A8%E6%95%85%E4%BA%8B%E6%80%9D%E7%BB%B4%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2016/06/10/用故事思维解决问题/</id>
    <published>2016-06-09T16:00:00.000Z</published>
    <updated>2017-06-15T16:42:32.935Z</updated>
    
    <content type="html"><![CDATA[<p><strong>每看完一本书都有一种技能升级的体会，于是迫不及待的记录下人生中那种获得升华的体会。</strong></p>
<h4 id="何为故事"><a href="#何为故事" class="headerlink" title="何为故事"></a>何为故事</h4><p><strong>互动能够让人找到发自内心的、来源于实践的意义，让讲故事的人和听故事的人都得到满足，这才是故事。</strong>那些下意识就把故事定义为一个有开头、过程和结尾的人一定还没有理解到故事的本质。</p>
<h4 id="重温回忆，留心自己所讲的故事"><a href="#重温回忆，留心自己所讲的故事" class="headerlink" title="重温回忆，留心自己所讲的故事"></a>重温回忆，留心自己所讲的故事</h4><p>可以通过改变你的故事来改变现实感受。<br>  <a id="more"></a></p>
<h4 id="好的故事配方"><a href="#好的故事配方" class="headerlink" title="好的故事配方"></a>好的故事配方</h4><p>一般好故事由三部分组成，旧规矩、中间的波折，新规矩。</p>
<h4 id="一点建议"><a href="#一点建议" class="headerlink" title="一点建议"></a>一点建议</h4><p>试图通过逻辑来控制人们的看法会让对方戒备心增强，会驱使对方离你越来越远。让故事变得更加有人情味。</p>
<h4 id="团队"><a href="#团队" class="headerlink" title="团队"></a>团队</h4><p>团队真正的信任来源于诚实。</p>
<h4 id="慈善和团结"><a href="#慈善和团结" class="headerlink" title="慈善和团结"></a>慈善和团结</h4><p>慈善是纵向的，来源于由上到下的评判。团结是水平的，有利于平等交流。一个团队要多团结，不要多慈善。</p>
<h4 id="学会从不同视角读你的故事"><a href="#学会从不同视角读你的故事" class="headerlink" title="学会从不同视角读你的故事"></a>学会从不同视角读你的故事</h4><p>花时间从不同视角审视重要的故事，就能尽可能避免挫伤他人的感情，避免人们浪费时间去生气。</p>
<h4 id="领导如何讲故事"><a href="#领导如何讲故事" class="headerlink" title="领导如何讲故事"></a>领导如何讲故事</h4><p>不要把主人公的自我意识加到故事中，那样的话对听众来说，这故事只是属于你的故事，毫无感染力。要控制自我意识。</p>
<h4 id="“我是谁”的故事"><a href="#“我是谁”的故事" class="headerlink" title="“我是谁”的故事"></a>“我是谁”的故事</h4><p>讲故事之前要弄明白这些问题：<br>你是谁？<br>你的特别之处是什么？<br>为何你可以影响他人？<br>人人都有天赋，你的天赋是哪些？<br>你是富有同情，是值得信赖，是诚实，还是圆滑老练？<br>你的什么本领让你有了影响他人的权利？</p>
<h4 id="学会倾听"><a href="#学会倾听" class="headerlink" title="学会倾听"></a>学会倾听</h4><p>无论对方和你的观点多么不可调和，也要深入理解对方的观点，暂时放下自己的观点，这样的倾听才能让你赢得讲诉自己故事的机会。<strong>津津有味地倾听，抱着可能会学到重要知识的期待去倾听。</strong></p>
<h4 id="领导如何讲故事-1"><a href="#领导如何讲故事-1" class="headerlink" title="领导如何讲故事"></a>领导如何讲故事</h4><p>不要把主人公的自我意识加到故事中，那样的话对听众来说，这故事只是属于你的故事，毫无感染力。要控制自我意识。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;每看完一本书都有一种技能升级的体会，于是迫不及待的记录下人生中那种获得升华的体会。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;何为故事&quot;&gt;&lt;a href=&quot;#何为故事&quot; class=&quot;headerlink&quot; title=&quot;何为故事&quot;&gt;&lt;/a&gt;何为故事&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;互动能够让人找到发自内心的、来源于实践的意义，让讲故事的人和听故事的人都得到满足，这才是故事。&lt;/strong&gt;那些下意识就把故事定义为一个有开头、过程和结尾的人一定还没有理解到故事的本质。&lt;/p&gt;
&lt;h4 id=&quot;重温回忆，留心自己所讲的故事&quot;&gt;&lt;a href=&quot;#重温回忆，留心自己所讲的故事&quot; class=&quot;headerlink&quot; title=&quot;重温回忆，留心自己所讲的故事&quot;&gt;&lt;/a&gt;重温回忆，留心自己所讲的故事&lt;/h4&gt;&lt;p&gt;可以通过改变你的故事来改变现实感受。&lt;br&gt;
    
    </summary>
    
      <category term="能力提升" scheme="http://yoursite.com/categories/%E8%83%BD%E5%8A%9B%E6%8F%90%E5%8D%87/"/>
    
    
      <category term="团队" scheme="http://yoursite.com/tags/%E5%9B%A2%E9%98%9F/"/>
    
  </entry>
  
  <entry>
    <title>产品经理的最佳实践</title>
    <link href="http://yoursite.com/2016/05/11/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/2016/05/11/产品经理的最佳实践/</id>
    <published>2016-05-10T16:00:00.000Z</published>
    <updated>2017-06-15T04:46:25.336Z</updated>
    
    <content type="html"><![CDATA[<h4 id="产品经理的职责"><a href="#产品经理的职责" class="headerlink" title="产品经理的职责"></a>产品经理的职责</h4><p> 许多产品经理将大把的时间浪费在与产品无关的工作上，比如，营销管理和项目管理，这些都不是产品经理应该干的活</p>
<h4 id="用户体验"><a href="#用户体验" class="headerlink" title="用户体验"></a>用户体验</h4><p> 对于大多数软件产品来说，用户体验就是产品的生命。产品经理应该与交互设计师、开发人员密切合作，设计良好的用户体验，打造实用价值的产品。<br>  <a id="more"></a></p>
<h4 id="机会评估"><a href="#机会评估" class="headerlink" title="机会评估"></a>机会评估</h4><p> 用方便快捷的机会评估方法取代过时的市场需求文档。动手设计产品前，先明确产品需要解决什么问题，为谁解决问题，以及评估产品的标准。</p>
<h4 id="特约用户"><a href="#特约用户" class="headerlink" title="特约用户"></a>特约用户</h4><p> 打造优秀的产品没有任何捷径，只能请用户反复试用产品，不断改进。</p>
<h4 id="产品原则"><a href="#产品原则" class="headerlink" title="产品原则"></a>产品原则</h4><p> 产品管理工作的主要内容是制定决策。明确的产品原则则可以帮助产品经理和产品团队树立清晰的价值标准，做出果断的依据。</p>
<h4 id="探索【定义】产品"><a href="#探索【定义】产品" class="headerlink" title="探索【定义】产品"></a>探索【定义】产品</h4><p> 产品经理的主要职责是探索（定义）有价值的、可用的、可行的产品。除非产品经理确定这三点，否则同事的努力都将付之东流。</p>
<h4 id="使用原型"><a href="#使用原型" class="headerlink" title="使用原型"></a>使用原型</h4><p> 使用高保真原型是探索产品的关键步骤。原因如下：第一，迫使产品经理深入定义解决方案；第二，可以让真实的用户参与测试、验证产品创意；第三，可以直观地向团队展示产品的设计和思路。</p>
<h4 id="用户参与原型测试"><a href="#用户参与原型测试" class="headerlink" title="用户参与原型测试"></a>用户参与原型测试</h4><p> 有了产品原型，产品经理可以方便地请用户验证产品创意。原型测试是所有产品经理和产品设计师都必须掌握的工作技能。获取有效的用户反馈是产品经理最重要的工作。</p>
<h4 id="根据数据改进产品"><a href="#根据数据改进产品" class="headerlink" title="根据数据改进产品"></a>根据数据改进产品</h4><p> 成功的产品经理懂得利用数据来改进现有产品。改进产品不是根据客户要求一味增加新功能，而是根据产品的实际应用情况，不断地提升产品的各项指标，逐步完善产品。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;产品经理的职责&quot;&gt;&lt;a href=&quot;#产品经理的职责&quot; class=&quot;headerlink&quot; title=&quot;产品经理的职责&quot;&gt;&lt;/a&gt;产品经理的职责&lt;/h4&gt;&lt;p&gt; 许多产品经理将大把的时间浪费在与产品无关的工作上，比如，营销管理和项目管理，这些都不是产品经理应该干的活&lt;/p&gt;
&lt;h4 id=&quot;用户体验&quot;&gt;&lt;a href=&quot;#用户体验&quot; class=&quot;headerlink&quot; title=&quot;用户体验&quot;&gt;&lt;/a&gt;用户体验&lt;/h4&gt;&lt;p&gt; 对于大多数软件产品来说，用户体验就是产品的生命。产品经理应该与交互设计师、开发人员密切合作，设计良好的用户体验，打造实用价值的产品。&lt;br&gt;
    
    </summary>
    
      <category term="产品经理" scheme="http://yoursite.com/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
    
      <category term="产品经理" scheme="http://yoursite.com/tags/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>产品经理的反省清单</title>
    <link href="http://yoursite.com/2016/05/10/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E7%9A%84%E5%8F%8D%E7%9C%81%E6%B8%85%E5%8D%95/"/>
    <id>http://yoursite.com/2016/05/10/产品经理的反省清单/</id>
    <published>2016-05-09T16:00:00.000Z</published>
    <updated>2017-06-15T03:52:18.033Z</updated>
    
    <content type="html"><![CDATA[<h3 id="不为失败找借口，只为成功找方法"><a href="#不为失败找借口，只为成功找方法" class="headerlink" title="不为失败找借口，只为成功找方法"></a><strong>不为失败找借口，只为成功找方法</strong></h3><ol>
<li><p>产品能吸引目标消费者的关注吗？</p>
</li>
<li><p>产品的设计是否人性化，易于操作？</p>
</li>
<li><p>产品能在竞争中取胜吗？即使是面对未来风云变化的市场，依旧有取胜的把握吗？</p>
<a id="more"></a>
</li>
<li><p>我了解目标用户吗？产品（不是理想的产品，而是实际开发出来的产品）是否能得到他们的认可？</p>
</li>
<li><p>产品是否有别与市面上的其他产品？我能在两分钟内想公司高管清除地阐明这些差别吗？能在一分钟内向客户解释清除吗？能在半分钟内向经验丰富的行业分析师解释清除吗？</p>
</li>
<li><p>产品能正常运行吗？</p>
</li>
<li><p>产品是否完整？用户对产品的印象如何？销售业绩如何？销售任务能否顺利完成？</p>
</li>
<li><p>产品的特色 是否与目标用户的需求一致？产品特色是否鲜明？</p>
</li>
<li><p>产品值钱吗？值多少钱？为什么值这么多钱？用户会选择更便宜的产品吗？</p>
</li>
<li><p>我了解其他团队成员对产品的看法吗？他们觉得产品好在哪里？他们的看法是否与我的观点一致</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;不为失败找借口，只为成功找方法&quot;&gt;&lt;a href=&quot;#不为失败找借口，只为成功找方法&quot; class=&quot;headerlink&quot; title=&quot;不为失败找借口，只为成功找方法&quot;&gt;&lt;/a&gt;&lt;strong&gt;不为失败找借口，只为成功找方法&lt;/strong&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;产品能吸引目标消费者的关注吗？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;产品的设计是否人性化，易于操作？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;产品能在竞争中取胜吗？即使是面对未来风云变化的市场，依旧有取胜的把握吗？&lt;/p&gt;
    
    </summary>
    
      <category term="产品经理" scheme="http://yoursite.com/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
    
      <category term="产品经理" scheme="http://yoursite.com/tags/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
  </entry>
  
</feed>
